{"version":3,"file":"static/js/pwacompat.4c701050.chunk.js","mappings":"0GA6BC,WAGC,GAAM,WAAYA,eAAeC,YAAcC,UAAUC,WAAzD,CAIA,IAiBIC,EACAC,EAlBEC,GAAQ,EAERC,EAAsB,CAAC,aAAc,aAAc,cACnDC,EAAqB,UACrBC,EAAwB,GACxBC,EAAkB,8BAClBC,EAAsB,IACtBC,EAAwB,GACxBC,EAAoB,GACpBC,EAAmB,IAEnBC,EAAYb,UAAUa,WAAa,GAEnCC,EADYd,UAAUe,SAAiD,IAAvCf,UAAUe,OAAOC,QAAQ,YACO,IAAlCH,EAAUG,QAAQ,YAAqB,eAAgBhB,YAAcI,EACnGa,EAAaC,QAAQL,EAAUM,MAAM,6BACrCC,EAAgC,qBAAZC,QAI1B,IACElB,EAAkBmB,cACpB,CAAE,MAAOC,GAAI,CACbpB,EAAkBA,GAAmB,CAAC,EAwhBV,aAAxBqB,SAASC,WACXC,IAEAC,OAAOC,iBAAiB,OAAQF,EAnjBlC,CA+BA,SAASG,EAAiBC,GAGxB,IACE,OAAON,SAASO,KAAKC,cAAcF,EACrC,CAAE,MAAOP,GACP,OAAO,IACT,CACF,CAOA,SAASU,EAAMC,EAAGC,GAChB,IAAMC,EAAM,eAAiBF,EAI7B,YAHUG,IAANF,IACFhC,EAAgBiC,GAAOD,GAElBhC,EAAgBiC,EACzB,CAEA,SAASV,IAEP,IAAMY,GADNpC,EAAa2B,EAAiB,yBACI3B,EAAWqC,KAAO,GACpD,IAAKD,EACH,KAAM,kDAGR,IAAME,EAmCR,SAA0BC,GACxB,IADiC,IAAAC,EAAA,WAE/B,IAAMC,EAAMF,EAAQG,GACpB,IACmB,OAAjB,IAAIC,IAAI,GAAIF,GAAK,CAAAR,EACV,SAACW,GAAI,OAAM,IAAID,IAAIC,GAAQ,GAAIH,GAAMI,UAAU,EACxD,CAAE,MAAOxB,GAAI,CACf,EANSqB,EAAI,EAAGA,EAAIH,EAAQO,SAAUJ,EAAG,CAAF,IAAAK,EAAAP,IAAA,qBAAAO,EAAA,OAAAA,EAAAd,CAAA,CAOvC,OAAO,SAACW,GAAI,OAAKA,GAAQ,EAAE,CAC7B,CA5CsBI,CAAiB,CAACZ,EAAca,WAC9CC,EAAiBnB,EAAM,YAC7B,GAAImB,EACF,IAEEC,EADgDC,KAAKC,MAAMH,GAC7CZ,EAChB,CAAE,MAAOgB,GACPC,QAAQC,KAAK,kBAAmBF,EAClC,KANF,CAUA,IAAMG,EAAM,IAAI7D,eAChB6D,EAAIC,KAAK,MAAOtB,GAGhBqB,EAAIE,gBAA8D,oBAA3C3D,EAAW4D,aAAa,eAG/CH,EAAII,OAAS,WACX,IACE,IAAMC,EAA0CV,KAAKC,MAAMI,EAAIM,cAC/DhC,EAAM,WAAY0B,EAAIM,cACtBZ,EAAQW,EAAMxB,EAChB,CAAE,MAAOgB,GACPC,QAAQC,KAAK,kBAAmBF,EAClC,CACF,EACAG,EAAIO,KAAK,KAlBT,CAmBF,CAuBA,SAASC,EAAKC,EAAWC,EAAMC,GAC7B,IAAIzC,EAAiBuC,EAAYE,GAAjC,CAGA,IAAMC,EAAO/C,SAASgD,cAAcJ,GACpC,IAAK,IAAMlC,KAAKmC,EACdE,EAAKE,aAAavC,EAAGmC,EAAKnC,IAG5B,OADAV,SAASO,KAAK2C,YAAYH,GACnBA,CANP,CAOF,CAEA,SAASI,EAAKC,EAAMC,GACdA,KACc,IAAZA,IACFA,EAAU,OAEZV,EAAK,OAAQ,CAACS,KAAAA,EAAMC,QAAAA,GAAU,UAAFC,OAAYF,EAAI,OAEhD,CAKA,SAASG,EAAcC,GACrB,IAAMC,EAAcD,EAAKE,MAAMC,MAAM,QAAQC,KAAI,SAACC,GAChD,MAAa,QAATA,EACKC,IAEFC,SAASF,EAAM,KAAO,CAC/B,IAEA,MAAO,CACLG,IAAKR,EAAKQ,IACVC,KAAMT,EAAKS,KACXP,MAAOF,EAAKE,MAEZQ,YAAaC,KAAKC,IAAIC,MAAM,KAAMZ,GAClCa,QAASd,EAAKc,QAAUd,EAAKc,QAAQX,MAAM,QAAU,CAAC,OAE1D,CAMA,SAAS9B,EAAQ0C,EAAUC,GAEzB,IA6R4B7D,EA7RtB8D,GAAYF,EAAgB,OAAK,IACpCX,IAAIL,GACJmB,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAEV,YAAcS,EAAET,WAAW,IAEzCW,EAAQJ,EAASK,QAAO,SAACtB,GAAI,OAAKA,EAAKc,QAAQ9E,QAAQ,QAAU,CAAC,IAClEuF,EAAWN,EAASK,QAAO,SAACtB,GAAI,OAAKA,EAAKc,QAAQ9E,QAAQ,aAAe,CAAC,IAE1EwF,GAAmBD,EAASvD,OAAS,EAAIuD,EAAWF,GAAOjB,KAAI,SAACJ,GAEpE,IAAMX,EAAO,CAAC,IAAO,OAAQ,KAAQ2B,EAAWhB,EAAU,KAAI,MAASA,EAAY,OAG7EyB,EAAc,WAAH3B,OAAcE,EAAY,MAAC,MAE5C,GADAb,EAAK,OAAQE,EAAM,eAAiBoC,GAC/B3F,KAGDkE,EAAKU,YAAc9E,GAOvB,OAJAyD,EAAU,IAAI,mBAIPF,EAAK,OAAQE,EAAM,2BAA6BoC,EACzD,IAAGH,OAAOpF,SAGJwF,EAAe7E,EAAiB,yBAChC8E,EAAWD,GAAgBA,EAAa7B,SAAW,GACnD+B,EAAmB1F,QAAQyF,EAASxF,MAAM,iCAE1C0F,EAAUd,EAAkB,QAC5Be,GAAsD,IAA1CzG,EAAoBW,QAAQ6F,GAI9C,GAHAlC,EAAK,yBAA0BmC,GAoQjC,SAAgCC,EAAOH,GACrC,IAAM9F,IAAkBM,EACtB,OAGF,IAAM4F,EAAeC,EAAyBF,GAC9C,GAAIjG,EAAgB,CAGlB6D,EAAK,wCADWiC,EAAmB,oBAAuBI,EAAe,QAAU,UAErF,KAAO,CAEL,IAAME,EAcV,WACE,IACE,OAAO7F,QAAQ8F,GAAGC,eAAeC,gBAAgBC,oBAAoBC,QACvE,CAAE,MAAOhG,GACP,CAEJ,CApBciG,GACV,IAAKN,EACH,OAGF,IAAM/E,EAAI6E,EAAe,IAAM,EAC/BE,EAAEO,gBAA+C,CAAC,EAAKtF,EAAG,EAAKA,EAAG,EAAKA,EAAG,EAAK,KAC/E+E,EAAEQ,gBAqBN,SAA4BX,GAC1B,IAAM/C,EAAO2D,EAAUZ,GACvB,MAAO,CACL,EAAK/C,EAAK,GACV,EAAKA,EAAK,GACV,EAAKA,EAAK,GACV,EAAKA,EAAK,GAEd,CA7BwB4D,CAAmBb,EACzC,CACF,CAxREc,CAA8C9B,EAAsB,aAAM,QAASa,GAE/E3F,EAAY,CAEd0D,EAAK,mBAAoBoB,EAAqB,YAC9CpB,EAAK,wBAAyBoB,EAAsB,aACpDpB,EAAK,yBAA0BqB,EAAkCD,EAAoB,WAAM,MAC3FpB,EAAK,gCAAiCoB,EAAsB,aAE5D,IAAM+B,EAAUzB,EAAM,GAClByB,GACFnD,EAAK,0BAA2BqB,EAAW8B,EAAa,MAE1DnD,EAAK,0BAA2BoB,EAA2B,iBAC7D,CAIA,GAFApB,EAAK,cAAeoB,EAAsB,cAErCjF,EAAgB,CAEnB,IAAMiH,GAsOoB5F,EAtOe4D,EAAsB,YAwO1D,CAAC,IAAO,WAAY,IAAO,aADnBiC,OAAO7F,GAAK,IAAI8F,OAAO,EAAG,KACiB,IA7NxD,OAVAtD,EAAK,iBAAkBoD,GACvBpD,EAAK,qBAAsBoD,QACX,eAAZlB,GACFlC,EAAK,gBAAiB,QACtBA,EAAK,cAAe,QACXmC,IACTnC,EAAK,eAAgB,OACrBA,EAAK,cAAe,gBAIxB,CAEA,IAAM+C,EACqB3B,EAA2B,kBAAMzF,EACtD4H,EAAoBjB,EAAyBS,GAG7CS,EAkMR,SAAqBC,GACnB,IAAID,EAaJ,OAZCC,GAAW,IACP9B,QAAO,SAAC+B,GAAG,MAAyB,WAApBA,EAAc,QAAc,IAC5CC,SAAQ,SAACD,GACR,GAAIA,EAAQ,GACVF,EAASE,EAAQ,OACZ,CACL,IAAMlH,EAAQkH,EAAS,IAAElH,MAAM,WAC3BA,IACFgH,EAAShH,EAAM,GAEnB,CACF,IACGgH,CACT,CAjNiBI,CAAYxC,EAA+B,sBAc1D,SAASyC,EAAUC,EAAOC,EAAQX,EAAa/C,GAC7C,IAAM2D,EAAQhH,OAAOiH,iBACfC,EAAMC,EAAiB,CAACL,MAAOA,EAAQE,EAAOD,OAAQA,EAASC,IAOrE,GALAE,EAAIE,MAAMJ,EAAOA,GACjBE,EAAIG,UAAYtB,EAChBmB,EAAII,SAAS,EAAG,EAAGR,EAAOC,GAC1BG,EAAIK,UAAUT,EAAQ,GAAIC,EAAS/H,GAAqB,GAEpDqE,EAAM,CAER,IAAImE,EAAanE,EAAKyD,MAAQE,EAC1BS,EAAcpE,EAAK0D,OAASC,EAC5BS,EAAa3I,IAEf0I,GAAcC,EAAa3I,EAC3B2I,EAAa3I,GAGX0I,GAAazI,GAAyB0I,GAAc1I,IACtDmI,EAAIQ,UAAUrE,EAAMmE,GAAa,EAAGC,GAAc,EAAGD,EAAWC,GAChEP,EAAIK,UAAU,EAAGE,EAAa,EAAIzI,GAEtC,CAEAkI,EAAIG,UAAYd,EAAoB,QAAU,QAC9CW,EAAIS,KAAO,GAAHxE,OAAMvE,EAAqB,OAAAuE,OAAMtE,GAGzC,IAAM+I,EAAIC,iBAAiBtJ,GAC3B2I,EAAIS,KAAOC,EAAEE,iBAAiB,2BAE9B,IAAMC,EAAQ3D,EAAe,MAAKA,EAAqB,YAAKvE,SAASkI,MAC/DC,EAAUd,EAAIe,YAAYF,GAC1BG,EAAcF,EAAQG,yBAA2BvJ,EAGvD,GAFAsI,EAAIK,UAAU,EAAGW,GAEbF,EAAQlB,MAAgB,GAARA,EAElBI,EAAIkB,SAASL,EAAOC,EAAQlB,OAAS,EAAG,QAIxC,IADA,IAAMuB,EAAQN,EAAMvE,MAAM,QACjBvC,EAAI,EAAGA,GAAKoH,EAAMhH,SAAUJ,EAAG,CACtC,IAAMqH,EAAOD,EAAME,MAAM,EAAGtH,GAAGuH,KAAK,KAC9BC,EAAevB,EAAIe,YAAYK,GAAMxB,OACvC7F,IAAMoH,EAAMhH,QAAUoH,EAAuB,GAAR3B,KAEvCI,EAAIkB,SAASE,EAAMG,GAAgB,EAAG,GACtCvB,EAAIK,UAAU,EAAgB,IAAbW,GACjBG,EAAMK,OAAO,EAAGzH,GAChBA,EAAI,EAER,CAGF,OAAO,WACL,IAAMoB,EAAO6E,EAAIyB,OAAOC,YACxB,GAAInK,EAAO,CACT,IAAMoK,EAAMhJ,SAASgD,cAAc,OACnCgG,EAAIhF,IAAMxB,EACVxC,SAASiJ,KAAKC,OAAOF,EACvB,CAEA,OADAG,EAAa5C,EAAa/D,GACnBA,CACT,CACF,CAMA,SAAS2G,EAAa5C,EAAa/D,GACjC,IAAM4G,EAAmDpJ,SAASgD,cAAc,QAChFoG,EAAgBnG,aAAa,MAAO,6BACpCmG,EAAgBnG,aAAa,QAAS,iBAAFK,OAAmBiD,EAAW,MAClE6C,EAAgBnG,aAAa,OAAQT,GACrCxC,SAASO,KAAK2C,YAAYkG,EAC5B,CA3FAzC,GAAUxD,EAAK,mBAAoB,UAAFG,OAAYqD,IAG7CxD,EAAK,+BAAgCmC,GACrCnC,EAAK,6BAA8BoB,EAAqB,YAAKA,EAAe,MA0F5E,IAAM8E,EAAW5I,EAAM,OACvB,IAAK7B,GAASyK,EACZ,IACE,IAAMC,EAA+CxH,KAAKC,MAAMsH,GAShE,OARAF,EAAa,WAAYG,EAAQ,GACjCH,EAAa,YAAaG,EAAQ,QAClCtE,EAAgB8B,SAAQ,SAACtD,GACvB,IAAM+F,EAASD,EAAQ,EAAE9F,EAAKzC,MAC1BwI,IACF/F,EAAKzC,KAAOwI,EAEhB,GAEF,CAAE,MAAOxJ,GACP,CAGJ,IAAMyJ,EAAS,CAAC,EAAK,CAAC,GAMtB,SAASC,EAAiBC,EAAiBC,GACzC,IAAM5B,EAAI5H,OAAOyJ,OACXC,EAAW7C,EAAUe,EAAEd,MAAOc,EAAEb,OAAQ,WAAYwC,GACpDI,EAAY9C,EAAUe,EAAEb,OAAQa,EAAEd,MAAO,YAAayC,GAK5DK,YAAW,WACTP,EAAU,EAAIK,IACdE,YAAW,WACTP,EAAU,EAAIM,IACdH,GACF,GAAG,GACL,GAAG,GACL,CA0BA,SAASK,IACPvJ,EAAM,MAAOqB,KAAKmI,UAAUT,GAC9B,EAGA,SAASU,IACP,IAAM1G,EAAOwB,EAAgBmF,QAC7B,GAAK3G,EAAL,CAKA,IAAMwF,EAAM,IAAIoB,MAChBpB,EAAIqB,YAAc,YAClBrB,EAAIsB,QAAU,WAAWJ,GAAyB,EAClDlB,EAAIzG,OAAS,WACXyG,EAAIzG,OAAS,KACbkH,EAAiBT,GAAK,WAEpB,IAAMuB,EAAUhG,EAA2B,kBAAKiG,EAAkBxB,EAAK9C,GACnEqE,GACF/G,EAAKzC,KAAOwJ,EACZf,EAAU,EAAER,EAAIhF,KAAOuG,EA7C/B,SAA8BZ,GAC5B,IAAIc,EAAOzF,EAAgBxD,OAAS,EAC9BsB,EAAQ,aACL2H,GACLd,GAEJ,EACA7G,IACAkC,EAAgB8B,SAAQ,SAACtD,GACvB,IAAMwF,EAAM,IAAIoB,MAChBpB,EAAIqB,YAAc,YAClBrB,EAAIsB,QAAUxH,EACdkG,EAAIzG,OAAS,WACXyG,EAAIzG,OAAS,KACbiB,EAAKzC,KAAOyJ,EAAkBxB,EAAK9C,GAAiB,GACpDsD,EAAU,EAAER,EAAIhF,KAAOR,EAAKzC,KAC5B+B,GACF,EACAkG,EAAIhF,IAAMR,EAAKzC,IACjB,GACF,CA0BQ2J,CAAqBV,IAErBA,GAEJ,GACF,EAEAhB,EAAIhF,IAAMR,EAAKzC,IApBf,MAFE0I,EAAiB,KAAMO,EAuB3B,CACAE,EACF,CAkFA,SAAS/D,EAAUZ,GACjB,IAAMoF,EAAIrD,IAGV,OAFAqD,EAAEnD,UAAYjC,EACdoF,EAAElD,SAAS,EAAG,EAAG,EAAG,GACbkD,EAAEC,aAAa,EAAG,EAAG,EAAG,GAAGpI,MAAQ,EAC5C,CAMA,SAASiD,EAAyBF,GAChC,IAGM/C,EAHY2D,EAAUZ,GAGL3B,KAAI,SAACjD,GAC1B,IAAMkK,EAAIlK,EAAI,IACd,OAAQkK,EAAI,OAAWA,EAAI,MAAQ1G,KAAK2G,KAAKD,EAAI,MAAS,MAAO,IACnE,IACME,EAAM,MAASvI,EAAK,GAAK,MAASA,EAAK,GAAK,MAASA,EAAK,GAEhE,OADiB2B,KAAK6G,IAAK,MAASD,EAAM,MACxB,CACpB,CAEA,SAASP,EAAkBS,EAAOC,GAAyB,IAAbC,EAAKC,UAAA5J,OAAA,QAAAX,IAAAuK,UAAA,IAAAA,UAAA,GAC3CC,EAAU/D,EAAiB2D,GAKjC,IAJAI,EAAQxD,UAAUoD,EAAO,EAAG,IAIvBE,IAEuB,MADRE,EAAQT,aAAa,EAAG,EAAG,EAAG,GAClCpI,KAAK,GACjB,OAOJ,OAHA6I,EAAQC,yBAA2B,mBACnCD,EAAQ7D,UAAY0D,EACpBG,EAAQ5D,SAAS,EAAG,EAAGwD,EAAMhE,MAAOgE,EAAM/D,QACnCmE,EAAQvC,OAAOC,WACxB,CAEA,SAASzB,IAA0D,IAAAiE,EAAAH,UAAA5J,OAAA,QAAAX,IAAAuK,UAAA,GAAAA,UAAA,GAAvB,CAACnE,MAAO,EAAGC,OAAQ,GAApCD,EAAKsE,EAALtE,MAAOC,EAAMqE,EAANrE,OAC1B4B,EAAS9I,SAASgD,cAAc,UAGtC,OAFA8F,EAAO7B,MAAQA,EACf6B,EAAO5B,OAASA,EACT4B,EAAO0C,WAAW,KAC3B,CAQD,CA1jBA,E","sources":["../node_modules/pwacompat/src/pwacompat.js"],"sourcesContent":["/*\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\n'use strict';\n\n// WARNING\n// Don't use this file directly in production! Please include `pwacompat.min.js`!\n// WARNING\n/**\n * @suppress {uselessCode}\n */\nfunction unused() {\n  // compiled out, but crashes IE11 early rather than within the code\n  `Please don't use this file directly: include pwacompat.min.js instead!`;\n}\n\n(function() {\n  // basic feature detection: from IE10+\n  // also fallout on 'navigator.standalone', we _are_ an iOS PWA\n  if (!('onload' in XMLHttpRequest.prototype) || navigator.standalone) {\n    return;\n  }\n\n  const debug = false;\n\n  const capableDisplayModes = ['standalone', 'fullscreen', 'minimal-ui'];\n  const defaultSplashColor = '#f8f9fa';\n  const defaultSplashTextSize = 24;\n  const defaultFontName = 'HelveticaNeue-CondensedBold';\n  const idealSplashIconSize = 128;\n  const minimumSplashIconSize = 48;\n  const splashIconPadding = 20;\n  const appleIconSizeMin = 120;\n\n  const userAgent = navigator.userAgent || '';\n  const isSafari = (navigator.vendor && navigator.vendor.indexOf('Apple') !== -1);\n  const isSafariMobile = isSafari && (userAgent.indexOf('Mobile/') !== -1 || 'standalone' in navigator) || debug;\n  const isIEOrEdge = Boolean(userAgent.match(/(MSIE |Edge\\/|Trident\\/)/));\n  const isEdgePWA = (typeof Windows !== 'undefined');\n\n  let manifestEl;  // we need this later, not just for JSON\n  let internalStorage;\n  try {\n    internalStorage = sessionStorage;\n  } catch (e) {}\n  internalStorage = internalStorage || {};\n\n  /**\n   * Retrieves element in head if available, otherwise null\n   * @param {string} selector CSS selector\n   * @return {?Element}\n   */\n  function getElementInHead(selector) {\n    // It's possible to pass \"bad\" attr or values here (originally from the manifest); just\n    // return null if there's something wrong.\n    try {\n      return document.head.querySelector(selector);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * @param {string} k\n   * @param {string=} v\n   * @return {string|undefined}\n   */\n  function store(k, v) {\n    const key = '__pwacompat_' + k;\n    if (v !== undefined) {\n      internalStorage[key] = v;\n    }\n    return internalStorage[key];\n  }\n\n  function setup() {\n    manifestEl = getElementInHead('link[rel=\"manifest\"]');\n    const manifestHref = manifestEl ? manifestEl.href : '';\n    if (!manifestHref) {\n      throw `can't find <link rel=\"manifest\" href=\"..\" />'`;\n    }\n\n    const hrefFactory = buildHrefFactory([manifestHref, location]);\n    const storedResponse = store('manifest');\n    if (storedResponse) {\n      try {\n        const data = /** @type {!Object<string, *>} */ (JSON.parse(storedResponse));\n        process(data, hrefFactory);\n      } catch (err) {\n        console.warn('PWACompat error', err);\n      }\n      return;\n    }\n\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', manifestHref);\n\n    // nb. use getAttribute for older brower safety\n    xhr.withCredentials = (manifestEl.getAttribute('crossorigin') === 'use-credentials');\n\n    // this is IE10+\n    xhr.onload = () => {\n      try {\n        const data = /** @type {!Object<string, *>} */ (JSON.parse(xhr.responseText));\n        store('manifest', xhr.responseText);\n        process(data, hrefFactory);\n      } catch (err) {\n        console.warn('PWACompat error', err);\n      }\n    };\n    xhr.send(null);\n  }\n\n  /**\n   * @param {!Array<string>} options\n   * @return {function(string): string}\n   */\n  function buildHrefFactory(options) {\n    for (let i = 0; i < options.length; ++i) {\n      const opt = options[i];\n      try {\n        new URL('', opt);\n        return (part) => (new URL(part || '', opt)).toString();\n      } catch (e) {}\n    }\n    return (part) => part || '';\n  }\n\n  /**\n   * Adds an element in the <head> if it's not present already based on the passed check.\n   * @param {string} localName tag name\n   * @param {!Object<string>} attr key-value collection of attributes\n   * @param {string} check to apply to the tag\n   */\n  function push(localName, attr, check) {\n    if (getElementInHead(localName + check)) {\n      return;\n    }\n    const node = document.createElement(localName);\n    for (const k in attr) {\n      node.setAttribute(k, attr[k]);\n    }\n    document.head.appendChild(node);\n    return node;\n  }\n\n  function meta(name, content) {\n    if (content) {\n      if (content === true) {\n        content = 'yes';\n      }\n      push('meta', {name, content}, `[name=\"${name}\"]`);\n    }\n  }\n\n  /**\n   * Pre-process the icon sizes and purpose into a tuple and array.\n   */\n  function normalizeIcon(icon) {\n    const parsedSizes = icon.sizes.split(/\\s+/g).map((size) => {\n      if (size === 'any') {\n        return Infinity;\n      }\n      return parseInt(size, 10) || 0; // NaN is falsey\n    });\n\n    return {\n      src: icon.src,\n      type: icon.type,\n      sizes: icon.sizes,\n      // Get the largest size from a processed icon.\n      largestSize: Math.max.apply(null, parsedSizes),\n      purpose: icon.purpose ? icon.purpose.split(/\\s+/g) : ['any'],\n    };\n  }\n\n  /**\n   * @param {!Object<string, (string|*)>} manifest\n   * @param {function(string): string} urlFactory\n   */\n  function process(manifest, urlFactory) {\n    // largest first\n    const allIcons = (manifest['icons'] || [])\n      .map(normalizeIcon)\n      .sort((a, b) => b.largestSize - a.largestSize);\n\n    const icons = allIcons.filter((icon) => icon.purpose.indexOf('any') > -1)\n    const maskable = allIcons.filter((icon) => icon.purpose.indexOf('maskable') > -1);\n\n    const appleTouchIcons = (maskable.length > 0 ? maskable : icons).map((icon) => {\n      // create regular link icons as byproduct\n      const attr = {'rel': 'icon', 'href': urlFactory(icon['src']), 'sizes': icon['sizes']};\n      // This checks for matching \"rel\" and \"sizes\". We don't check for the same image file, as\n      // it is used literally by ourselves (and could be set by users for another icon).\n      const querySuffix = `[sizes=\"${icon['sizes']}\"]`;\n      push('link', attr, '[rel=\"icon\"]' + querySuffix);\n      if (!isSafariMobile) {\n        return;\n      }\n      if (icon.largestSize < appleIconSizeMin) {\n        return;\n      }\n      attr['rel'] = 'apple-touch-icon';\n\n      // nb. we used to call `removeAttribute('sizes')` here, which crashed iOS 8\n      // ... sizes has been supported since iOS 4.2 (!)\n      return push('link', attr, '[rel=\"apple-touch-icon\"]' + querySuffix);\n    }).filter(Boolean);\n\n    // nb. only for iOS, but watch for future CSS rule `@viewport { viewport-fit: cover; }`\n    const metaViewport = getElementInHead('meta[name=\"viewport\"]');\n    const viewport = metaViewport && metaViewport.content || '';\n    const viewportFitCover = Boolean(viewport.match(/\\bviewport-fit\\s*=\\s*cover\\b/));\n\n    const display = manifest['display'];\n    const isCapable = capableDisplayModes.indexOf(display) !== -1;\n    meta('mobile-web-app-capable', isCapable);\n    updateThemeColorRender(/** @type {string} */ (manifest['theme_color']) || 'black', viewportFitCover);\n\n    if (isIEOrEdge) {\n      // Pinned Sites, largely from https://technet.microsoft.com/en-us/windows/dn255024(v=vs.60)\n      meta('application-name', manifest['short_name']);\n      meta('msapplication-tooltip', manifest['description']);\n      meta('msapplication-starturl', urlFactory(/** @type {string} */ (manifest['start_url']) || '.'));\n      meta('msapplication-navbutton-color', manifest['theme_color']);\n\n      const largest = icons[0];\n      if (largest) {\n        meta('msapplication-TileImage', urlFactory(largest['src']));\n      }\n      meta('msapplication-TileColor', manifest['background_color']);\n    }\n\n    meta('theme-color', manifest['theme_color']);\n\n    if (!isSafariMobile) {\n      // TODO(samthor): We don't detect QQ or UC, we just set the vars anyway.\n      const orientation = simpleOrientationFor(manifest['orientation']);\n      meta('x5-orientation', orientation);      // QQ\n      meta('screen-orientation', orientation);  // UC\n      if (display === 'fullscreen') {\n        meta('x5-fullscreen', 'true');  // QQ\n        meta('full-screen', 'yes');     // UC\n      } else if (isCapable) {\n        meta('x5-page-mode', 'app');         // QQ\n        meta('browsermode', 'application');  // UC\n      }\n\n      return;  // the rest of this file is for Mobile Safari\n    }\n\n    const backgroundColor =\n        /** @type {string} */ (manifest['background_color']) || defaultSplashColor;\n    const backgroundIsLight = shouldUseLightForeground(backgroundColor);\n\n    // Add related iTunes app from manifest.\n    const itunes = findAppleId(manifest['related_applications']);\n    itunes && meta('apple-itunes-app', `app-id=${itunes}`);\n\n    // General iOS meta tags.\n    meta('apple-mobile-web-app-capable', isCapable);\n    meta('apple-mobile-web-app-title', manifest['short_name'] || manifest['name']);\n\n    /**\n     * @param {number} width\n     * @param {number} height\n     * @param {string} orientation\n     * @param {?Image} icon\n     * @return {function(): string}\n     */\n    function splashFor(width, height, orientation, icon) {\n      const ratio = window.devicePixelRatio;\n      const ctx = contextForCanvas({width: width * ratio, height: height * ratio});\n\n      ctx.scale(ratio, ratio);\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(0, 0, width, height);\n      ctx.translate(width / 2, (height - splashIconPadding) / 2);\n\n      if (icon) {\n        // nb: on Chrome, we need the image >=48px, use the big layout >=80dp, ideal is >=128dp\n        let iconWidth = (icon.width / ratio);\n        let iconHeight = (icon.height / ratio);\n        if (iconHeight > idealSplashIconSize) {\n          // clamp to 128px height max\n          iconWidth /= (iconHeight / idealSplashIconSize);\n          iconHeight = idealSplashIconSize;\n        }\n\n        if (iconWidth >= minimumSplashIconSize && iconHeight >= minimumSplashIconSize) {\n          ctx.drawImage(icon, iconWidth / -2, iconHeight / -2, iconWidth, iconHeight);\n          ctx.translate(0, iconHeight / 2 + splashIconPadding);\n        }\n      }\n\n      ctx.fillStyle = backgroundIsLight ? 'white' : 'black';\n      ctx.font = `${defaultSplashTextSize}px ${defaultFontName}`;\n\n      // Set the user-requested font; if it's invalid, the set will fail.\n      const s = getComputedStyle(manifestEl);\n      ctx.font = s.getPropertyValue('--pwacompat-splash-font'); // blank for old browsers\n\n      const title = manifest['name'] || manifest['short_name'] || document.title;\n      const measure = ctx.measureText(title);\n      const textHeight = (measure.actualBoundingBoxAscent || defaultSplashTextSize);\n      ctx.translate(0, textHeight);\n\n      if (measure.width < width * 0.8) {\n        // short-circuit, just draw entire string\n        ctx.fillText(title, measure.width / -2, 0);\n      } else {\n        // longer wrap case, draw once we have >0.7 width accumulated\n        const words = title.split(/\\s+/g);\n        for (let i = 1; i <= words.length; ++i) {\n          const cand = words.slice(0, i).join(' ');\n          const measureWidth = ctx.measureText(cand).width;\n          if (i === words.length || measureWidth > width * 0.6) {\n            // render accumulated words\n            ctx.fillText(cand, measureWidth / -2, 0);\n            ctx.translate(0, textHeight * 1.2);\n            words.splice(0, i);\n            i = 0;\n          }\n        }\n      }\n\n      return () => {\n        const data = ctx.canvas.toDataURL();\n        if (debug) {\n          const img = document.createElement('img');\n          img.src = data;\n          document.body.append(img);\n        }\n        appendSplash(orientation, data);\n        return data;\n      };\n    }\n\n    /**\n     * @param {string} orientation\n     * @param {string} data\n     */\n    function appendSplash(orientation, data) {\n      const generatedSplash = /** @type {!HTMLLinkElement} */ (document.createElement('link'));\n      generatedSplash.setAttribute('rel', 'apple-touch-startup-image');\n      generatedSplash.setAttribute('media', `(orientation: ${orientation})`);\n      generatedSplash.setAttribute('href', data);\n      document.head.appendChild(generatedSplash);\n    }\n\n    // fetch previous (session) iOS image updates\n    const rendered = store('iOS');\n    if (!debug && rendered) {\n      try {\n        const prev = /** @type {!Object<string, string>} */ (JSON.parse(rendered));\n        appendSplash('portrait', prev['p']);\n        appendSplash('landscape', prev['l']);\n        appleTouchIcons.forEach((icon) => {\n          const change = prev['i'][icon.href];\n          if (change) {\n            icon.href = change;\n          }\n        });\n        return;\n      } catch (e) {\n        // ignore, some problem with the JSON\n      }\n    }\n    const update = {'i': {}};\n\n    /**\n     * @param {?Image} applicationIcon\n     * @param {function(): void} done\n     */\n    function renderBothSplash(applicationIcon, done) {\n      const s = window.screen;\n      const portrait = splashFor(s.width, s.height, 'portrait', applicationIcon);\n      const landscape = splashFor(s.height, s.width, 'landscape', applicationIcon);\n\n      // this is particularly egregious setTimeout use, but the .toDataURL() is one of the\n      // \"bottlenecks\" of PWACompat, so don't elongate any single frame more than needed.\n\n      setTimeout(() => {\n        update['p'] = portrait();\n        setTimeout(() => {\n          update['l'] = landscape();\n          done();\n        }, 10);\n      }, 10);\n    }\n\n    // fetches and redraws any remaining icons in appleTouchIcons (to have proper bg)\n    function redrawRemainingIcons(done) {\n      let left = appleTouchIcons.length + 1;\n      const check = () => {\n        if (!--left) {\n          done();\n        }\n      };\n      check();\n      appleTouchIcons.forEach((icon) => {\n        const img = new Image();\n        img.crossOrigin = 'anonymous';\n        img.onerror = check;\n        img.onload = () => {\n          img.onload = null;\n          icon.href = updateTransparent(img, backgroundColor, true);\n          update['i'][img.src] = icon.href;\n          check();\n        };\n        img.src = icon.href;\n      });\n    }\n\n    // write the update to sessionStorage\n    function saveUpdate() {\n      store('iOS', JSON.stringify(update));\n    }\n\n    // called repeatedly until a valid icon is found\n    function fetchIconAndBuildSplash() {\n      const icon = appleTouchIcons.shift();\n      if (!icon) {\n        renderBothSplash(null, saveUpdate);  // ran out of icons, render without one\n        return;\n      }\n\n      const img = new Image();\n      img.crossOrigin = 'anonymous';\n      img.onerror = () => void fetchIconAndBuildSplash();  // try again\n      img.onload = () => {\n        img.onload = null;  // iOS Safari might call this many times\n        renderBothSplash(img, () => {\n          // ... if the icon used for splash changed, redraw others too\n          const redrawn = manifest['background_color'] && updateTransparent(img, backgroundColor);\n          if (redrawn) {\n            icon.href = redrawn;\n            update['i'][img.src] = redrawn;\n            redrawRemainingIcons(saveUpdate);\n          } else {\n            saveUpdate();\n          }\n        });\n      };\n\n      img.src = icon.href;  // trigger load\n    }\n    fetchIconAndBuildSplash();\n  }\n\n  function findAppleId(related) {\n    let itunes;\n    (related || [])\n        .filter((app) => app['platform'] === 'itunes')\n        .forEach((app) => {\n          if (app['id']) {\n            itunes = app['id'];\n          } else {\n            const match = app['url'].match(/id(\\d+)/);\n            if (match) {\n              itunes = match[1];\n            }\n          }\n        });\n    return itunes;\n  }\n\n  function simpleOrientationFor(v) {\n    const prefix = String(v || '').substr(0, 3);\n    return {'por': 'portrait', 'lan': 'landscape'}[prefix] || '';\n  }\n\n  /**\n   * @param {string} color\n   * @param {boolean} viewportFitCover\n   */\n  function updateThemeColorRender(color, viewportFitCover) {\n    if (!(isSafariMobile || isEdgePWA)) {\n      return;\n    }\n\n    const themeIsLight = shouldUseLightForeground(color);\n    if (isSafariMobile) {\n      // nb. Safari 11.3+ gives a deprecation warning about this meta tag.\n      const content = viewportFitCover ? 'black-translucent' : (themeIsLight ? 'black' : 'default');\n      meta('apple-mobile-web-app-status-bar-style', content);\n    } else {\n      // Edge PWA\n      const t = getEdgeTitleBar();\n      if (!t) {\n        return;  // something went wrong, we had a UWP without titleBar\n      }\n      // Foreground is black if theme is light, otherwise white.\n      const v = themeIsLight ? 255 : 0;\n      t.foregroundColor = /** @type {WindowsColor} */ ({'r': v, 'g': v, 'b': v, 'a': 255});\n      t.backgroundColor = colorToWindowsRGBA(color);\n    }\n  }\n\n  /**\n   * @return {!ApplicationViewTitleBar|undefined}\n   */\n  function getEdgeTitleBar() {\n    try {\n      return Windows.UI.ViewManagement.ApplicationView.getForCurrentView().titleBar;\n    } catch (e) {\n      // implicit return undefined\n    }\n  }\n\n  /**\n   * The Windows titlebar APIs expect an object of {r, g, b, a}.\n   *\n   * @param {string} color\n   * @return {WindowsColor}\n   */\n  function colorToWindowsRGBA(color) {\n    const data = readColor(color);\n    return /** @type {WindowsColor} */ ({\n      'r': data[0],\n      'g': data[1],\n      'b': data[2],\n      'a': data[3],\n    });\n  }\n\n  /**\n   * @param {string} color\n   * @return {!Uint8ClampedArray}\n   */\n  function readColor(color) {\n    const c = contextForCanvas();\n    c.fillStyle = color;\n    c.fillRect(0, 0, 1, 1);\n    return c.getImageData(0, 0, 1, 1).data || [];  // incase this fails for some reason\n  }\n\n  /**\n   * @param {string} color\n   * @return {boolean}\n   */\n  function shouldUseLightForeground(color) {\n    const pixelData = readColor(color);\n\n    // From https://cs.chromium.org/chromium/src/chrome/android/java/src/org/chromium/chrome/browser/util/ColorUtils.java\n    const data = pixelData.map((v) => {\n      const f = v / 255;\n      return (f < 0.03928) ? f / 12.92 : Math.pow((f + 0.055) / 1.055, 2.4);\n    });\n    const lum = 0.2126 * data[0] + 0.7152 * data[1] + 0.0722 * data[2];\n    const contrast = Math.abs((1.05) / (lum + 0.05));\n    return contrast > 3;\n  }\n\n  function updateTransparent(image, background, force=false) {\n    const context = contextForCanvas(image);\n    context.drawImage(image, 0, 0);\n\n    // look for transparent pixel in top-left\n    // TODO: Chrome actually checks the four corners for some cases.\n    if (!force) {\n      const imageData = context.getImageData(0, 0, 1, 1);\n      if (imageData.data[3] === 255) {\n        return;\n      }\n    }\n\n    context.globalCompositeOperation = 'destination-over';  // only replace transparent areas\n    context.fillStyle = background;\n    context.fillRect(0, 0, image.width, image.height);\n    return context.canvas.toDataURL();\n  }\n\n  function contextForCanvas({width, height} = {width: 1, height: 1}) {\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    return canvas.getContext('2d');\n  }\n\n  // actually run PWACompat here\n  if (document.readyState === 'complete') {\n    setup();\n  } else {\n    window.addEventListener('load', setup);\n  }\n}());\n"],"names":["XMLHttpRequest","prototype","navigator","standalone","manifestEl","internalStorage","debug","capableDisplayModes","defaultSplashColor","defaultSplashTextSize","defaultFontName","idealSplashIconSize","minimumSplashIconSize","splashIconPadding","appleIconSizeMin","userAgent","isSafariMobile","vendor","indexOf","isIEOrEdge","Boolean","match","isEdgePWA","Windows","sessionStorage","e","document","readyState","setup","window","addEventListener","getElementInHead","selector","head","querySelector","store","k","v","key","undefined","manifestHref","href","hrefFactory","options","_loop","opt","i","URL","part","toString","length","_ret","buildHrefFactory","location","storedResponse","process","JSON","parse","err","console","warn","xhr","open","withCredentials","getAttribute","onload","data","responseText","send","push","localName","attr","check","node","createElement","setAttribute","appendChild","meta","name","content","concat","normalizeIcon","icon","parsedSizes","sizes","split","map","size","Infinity","parseInt","src","type","largestSize","Math","max","apply","purpose","manifest","urlFactory","allIcons","sort","a","b","icons","filter","maskable","appleTouchIcons","querySuffix","metaViewport","viewport","viewportFitCover","display","isCapable","color","themeIsLight","shouldUseLightForeground","t","UI","ViewManagement","ApplicationView","getForCurrentView","titleBar","getEdgeTitleBar","foregroundColor","backgroundColor","readColor","colorToWindowsRGBA","updateThemeColorRender","largest","orientation","String","substr","backgroundIsLight","itunes","related","app","forEach","findAppleId","splashFor","width","height","ratio","devicePixelRatio","ctx","contextForCanvas","scale","fillStyle","fillRect","translate","iconWidth","iconHeight","drawImage","font","s","getComputedStyle","getPropertyValue","title","measure","measureText","textHeight","actualBoundingBoxAscent","fillText","words","cand","slice","join","measureWidth","splice","canvas","toDataURL","img","body","append","appendSplash","generatedSplash","rendered","prev","change","update","renderBothSplash","applicationIcon","done","screen","portrait","landscape","setTimeout","saveUpdate","stringify","fetchIconAndBuildSplash","shift","Image","crossOrigin","onerror","redrawn","updateTransparent","left","redrawRemainingIcons","c","getImageData","f","pow","lum","abs","image","background","force","arguments","context","globalCompositeOperation","_ref","getContext"],"sourceRoot":""}