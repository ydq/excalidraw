{"version":3,"file":"static/js/storage.fe2cef89.chunk.js","mappings":";+JAuBaA,EAAe,iCAKfC,EAA4B,gBCLzCC,EAAA,SAAAC,GAWE,SAAAD,EAAYE,EAAwBC,GAApC,IAAAC,EACEH,EAAAI,KAAA,KACEC,EAAYJ,GACZ,qBAAqBC,EAAO,KAAKG,EAAYJ,GAAK,MACnD,YAXHE,EAAAG,WAAgD,CAAEC,eAAgB,MAchEC,OAAOC,eAAeN,EAAMJ,EAAqBW,aA+BrD,OAjD0CC,EAAAA,EAAAA,IAAAZ,EAAAC,GAwBxCD,EAAAW,UAAAE,YAAA,SAAYX,GACV,OAAOI,EAAYJ,KAAUY,KAAKZ,MAMpCO,OAAAM,eAAIf,EAAAW,UAAA,UAAO,KAAX,WACE,OAAIG,KAAKP,WAAWC,eACRM,KAAKX,QAAO,KAAKW,KAAKP,WAAWC,eAEpCM,KAAKX,yCAOhBM,OAAAM,eAAIf,EAAAW,UAAA,iBAAc,KAAlB,WACE,OAAOG,KAAKP,WAAWC,oBAGzB,SAAmBA,GACjBM,KAAKP,WAAWC,eAAiBA,mCAErCR,CAAA,CAjDA,CAA0CgB,EAAAA,aAsF1BV,EAAYJ,GAC1B,MAAO,WAAaA,CACtB,UAEgBe,IAId,OAAO,IAAIjB,EAAqB,UAF9B,iFAGJ,UAuEgBkB,IACd,OAAO,IAAIlB,EAAqB,WAE9B,qCAEJ,UAiCgBmB,IACd,OAAO,IAAInB,EAAqB,oBAE9B,yDAEJ,UAgBgBoB,EAAgBjB,GAC9B,OAAO,IAAIH,EAAqB,mBAAmCG,EACrE,UA+BgBkB,IACd,OAAO,IAAIrB,EAAqB,cAE9B,gCAEJ,UAKgBsB,EAAqBC,GACnC,OAAO,IAAIvB,EAAqB,yBAE9B,kBACEuB,EADF,kHAKJ,UAMgBC,EACdC,EACAtB,GAEA,OAAO,IAAIH,EAAqB,iBAE9B,iCAAmCyB,EAAS,MAAQtB,EAExD,UAegBuB,EAAcvB,GAC5B,MAAM,IAAIH,EAAqB,iBAE7B,mBAAqBG,EAEzB,CCjTO,IAAMwB,EAAe,CAQ1BC,IAAK,MAOLC,OAAQ,SAORC,UAAW,YAUXC,SAAU,YAGZC,EAGE,SAAmBC,EAAkBC,GAAlB,KAAAD,KAAAA,EACjBnB,KAAKoB,YAAcA,GAAe,eAItBC,EACdV,EACAW,GAEA,OAAQX,GACN,KAAKE,EAAaC,IAChB,OAAO,IAAII,EAAWK,EAAWD,IACnC,KAAKT,EAAaE,OAClB,KAAKF,EAAaG,UAChB,OAAO,IAAIE,EAAWM,EAAab,EAAQW,IAC7C,KAAKT,EAAaI,SAChB,OAAO,IAAIC,WAqIaO,GAC5B,IAAMC,EAAQ,IAAIC,EAAaF,GAC/B,OAAIC,EAAME,OACDJ,EAAaX,EAAaE,OAAQW,EAAMG,eAlFdC,GACnC,IAAIC,EACJ,IACEA,EAAUC,mBAAmBF,GAC7B,MAAOG,GACP,MAAMvB,EAAcG,EAAaI,SAAU,uBAE7C,OAAOM,EAAWQ,EACpB,CA4EWG,CAAqBR,EAAMG,KAEtC,CA3IQM,CAAcb,GA8IN,IAAIK,EA7IQL,GA8IbF,aAvIb,MAAMjB,GACR,UAEgBoB,EAAWO,GAEzB,IADA,IAAMM,EAAc,GACXC,EAAI,EAAGA,EAAIP,EAAMQ,OAAQD,IAAK,CACrC,IAAIE,EAAIT,EAAMU,WAAWH,GACzB,GAAIE,GAAK,IACPH,EAAEK,KAAKF,QAEP,GAAIA,GAAK,KACPH,EAAEK,KAAK,IAAOF,GAAK,EAAI,IAAW,GAAJA,QAE9B,GAAoB,SAAX,MAAJA,GAIH,GADEF,EAAIP,EAAMQ,OAAS,GAA2C,SAAX,MAA1BR,EAAMU,WAAWH,EAAI,IAO9CE,EAAI,OAAe,KAFRA,IAEiB,GAAY,KAD7BT,EAAMU,aAAaH,GAE9BD,EAAEK,KACA,IAAOF,GAAK,GACZ,IAAQA,GAAK,GAAM,GACnB,IAAQA,GAAK,EAAK,GAClB,IAAW,GAAJA,QATTH,EAAEK,KAAK,IAAK,IAAK,UAaC,SAAX,MAAJF,GAEHH,EAAEK,KAAK,IAAK,IAAK,KAEjBL,EAAEK,KAAK,IAAOF,GAAK,GAAK,IAAQA,GAAK,EAAK,GAAK,IAAW,GAAJA,GAMhE,OAAO,IAAIG,WAAWN,EACxB,UAYgBZ,EAAab,EAAsBmB,GACjD,OAAQnB,GACN,KAAKE,EAAaE,OAChB,IAAM4B,GAAmC,IAAxBb,EAAMc,QAAQ,KACzBC,GAAmC,IAAxBf,EAAMc,QAAQ,KAC/B,GAAID,GAAYE,EAEd,MAAMnC,EACJC,EACA,uBAHkBgC,EAAW,IAAM,KAKjC,qCAGN,MAEF,KAAK9B,EAAaG,UAChB,IAAM8B,GAAkC,IAAxBhB,EAAMc,QAAQ,KACxBG,GAAmC,IAAxBjB,EAAMc,QAAQ,KAC/B,GAAIE,GAAWC,EAEb,MAAMrC,EACJC,EACA,uBAHkBmC,EAAU,IAAM,KAGI,kCAG1ChB,EAAQA,EAAMkB,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KAMnD,IAAIC,EACJ,IACEA,EAAQC,KAAKpB,GACb,MAAOG,GACP,MAAMvB,EAAcC,EAAQ,2BAG9B,IADA,IAAMwC,EAAQ,IAAIT,WAAWO,EAAMX,QAC1BD,EAAI,EAAGA,EAAIY,EAAMX,OAAQD,IAChCc,EAAMd,GAAKY,EAAMT,WAAWH,GAE9B,OAAOc,CACT,CAEA,IAAAxB,EAKE,SAAYyB,GAJZ,KAAAxB,QAAkB,EAClB,KAAAR,YAA6B,KAI3B,IAAMiC,EAAUD,EAAQE,MAAM,mBAC9B,GAAgB,OAAZD,EACF,MAAM3C,EACJG,EAAaI,SACb,yDAGJ,IAAMsC,EAASF,EAAQ,IAAM,KACf,MAAVE,IACFvD,KAAK4B,QAuBO4B,EAvBWD,EAuBAE,EAvBQ,UAwBhBD,EAAElB,QAAUmB,EAAInB,QAK5BkB,EAAEE,UAAUF,EAAElB,OAASmB,EAAInB,UAAYmB,GA5B1CzD,KAAKoB,YAAcpB,KAAK4B,OACpB2B,EAAOG,UAAU,EAAGH,EAAOjB,OAAS,GACpCiB,GAENvD,KAAK6B,KAAOuB,EAAQM,UAAUN,EAAQR,QAAQ,KAAO,GAkBzD,IAAkBY,EAAWC,GCxMtB,IC4BKE,ED5BCC,EAAY,CAavBC,cAAe,iBAwBJC,EAAY,CAEvBC,QAAS,UAGTC,OAAQ,SAGRC,QAAS,UAGTC,SAAU,WAGVC,MAAO,kBAGOC,EACdC,GAEA,OAAQA,GACN,IAAK,UACL,IAAK,UACL,IAAK,YACH,OAAOP,EAAUC,QACnB,IAAK,SACH,OAAOD,EAAUE,OACnB,IAAK,UACH,OAAOF,EAAUG,QACnB,IAAK,WACH,OAAOH,EAAUI,SAGnB,QAEE,OAAOJ,EAAUK,MAEvB,EC9CA,SAAYR,GACVA,EAAAA,EAAA,uBACAA,EAAAA,EAAA,iCACAA,EAAAA,EAAA,gBACD,CAJD,CAAYA,IAAAA,EAAS,KClCrB,IAAAW,EAAA,WAME,SAAAA,IAAA,IAAAhF,EAAA,KAFQ,KAAAiF,OAAiB,EAGvBvE,KAAKwE,KAAO,IAAIC,eAChBzE,KAAK0E,WAAaf,EAAUgB,SAC5B3E,KAAK4E,aAAe,IAAIC,SAAQ,SAAAC,GAC9BxF,EAAKkF,KAAKO,iBAAiB,SAAS,WAClCzF,EAAKoF,WAAaf,EAAUqB,MAC5BF,EAAQxF,MAEVA,EAAKkF,KAAKO,iBAAiB,SAAS,WAClCzF,EAAKoF,WAAaf,EAAUsB,cAC5BH,EAAQxF,MAEVA,EAAKkF,KAAKO,iBAAiB,QAAQ,WACjCD,EAAQxF,SAoGhB,OA5FEgF,EAAAzE,UAAAqF,KAAA,SACEC,EACAC,EACAC,EACAC,GAEA,GAAItF,KAAKuE,MACP,MAAM3D,EAAc,iCAItB,GAFAZ,KAAKuE,OAAQ,EACbvE,KAAKwE,KAAKe,KAAKH,EAAQD,GAAK,QACZK,IAAZF,EACF,IAAK,IAAMG,KAAOH,EACZA,EAAQI,eAAeD,IACzBzF,KAAKwE,KAAKmB,iBAAiBF,EAAKH,EAAQG,GAAKG,YASnD,YALaJ,IAATH,EACFrF,KAAKwE,KAAKU,KAAKG,GAEfrF,KAAKwE,KAAKU,OAELlF,KAAK4E,cAMdN,EAAAzE,UAAAgG,aAAA,WACE,IAAK7F,KAAKuE,MACR,MAAM3D,EAAc,yCAEtB,OAAOZ,KAAK0E,YAMdJ,EAAAzE,UAAAiG,UAAA,WACE,IAAK9F,KAAKuE,MACR,MAAM3D,EAAc,sCAEtB,IACE,OAAOZ,KAAKwE,KAAKuB,OACjB,MAAO9D,GACP,OAAQ,IAOZqC,EAAAzE,UAAAmG,gBAAA,WACE,IAAKhG,KAAKuE,MACR,MAAM3D,EAAc,4CAEtB,OAAOZ,KAAKwE,KAAKyB,cAOnB3B,EAAAzE,UAAAqG,MAAA,WACElG,KAAKwE,KAAK0B,SAMZ5B,EAAAzE,UAAAsG,kBAAA,SAAkBC,GAChB,OAAOpG,KAAKwE,KAAK2B,kBAAkBC,IAMrC9B,EAAAzE,UAAAwG,0BAAA,SAA0BC,GACA,MAApBtG,KAAKwE,KAAK+B,QACZvG,KAAKwE,KAAK+B,OAAOxB,iBAAiB,WAAYuB,IAOlDhC,EAAAzE,UAAA2G,6BAAA,SAA6BF,GACH,MAApBtG,KAAKwE,KAAK+B,QACZvG,KAAKwE,KAAK+B,OAAOE,oBAAoB,WAAYH,IAGvDhC,CAAA,CAvHA,GCGAoC,EAAA,oBAAAA,IAAA,CAIA,OAHEA,EAAA7G,UAAA8G,YAAA,WACE,OAAO,IAAIrC,GAEfoC,CAAA,CAJA,GCIAE,EAAA,WAGE,SAAAA,EAA4BC,EAAgBC,GAAhB,KAAAD,OAAAA,EAC1B7G,KAAK+G,MAAQD,EAuGjB,OApGEnH,OAAAM,eAAI2G,EAAA/G,UAAA,OAAI,KAAR,WACE,OAAOG,KAAK+G,uCAGdpH,OAAAM,eAAI2G,EAAA/G,UAAA,SAAM,KAAV,WACE,OAA4B,IAArBG,KAAK8G,KAAKxE,wCAGnBsE,EAAA/G,UAAAmH,cAAA,WACE,IAAMC,EAASC,mBACf,MAAO,MAAQD,EAAOjH,KAAK6G,QAAU,MAAQI,EAAOjH,KAAK8G,OAG3DF,EAAA/G,UAAAsH,oBAAA,WAEE,MAAO,MADQD,mBACOlH,KAAK6G,QAAU,MAGhCD,EAAAQ,mBAAP,SAA0BC,GACxB,IAAIC,EACJ,IACEA,EAAiBV,EAASW,YAAYF,GACtC,MAAOpF,GAGP,OAAO,IAAI2E,EAASS,EAAc,IAEpC,GAA4B,KAAxBC,EAAeR,KACjB,OAAOQ,EAEP,MNgJG,IAAIpI,EAAqB,yBAE9B,2BMlJ6BmI,ENkJS,OM9IjCT,EAAAW,YAAP,SAAmBpC,GACjB,IAAIqC,EAA4B,KAC1BC,EAAe,sBAOrB,IACMC,EAAU,IAAIC,OAAO,SAAWF,EADvB,YAC8C,KAG7D,SAASG,EAAWC,GAClBA,EAAId,MAAQ/E,mBAAmB6F,EAAIf,MAiCrC,IA/BA,IACMgB,EAAsB9I,EAAagE,QAAQ,OAAQ,OAiBnD+E,EAAS,CACb,CAAEC,MAAON,EAASO,QAxBF,CAAEpB,OAAQ,EAAGC,KAAM,GAwBGoB,WA/BxC,SAAkBL,GAC6B,MAAzCA,EAAIf,KAAKqB,OAAON,EAAIf,KAAKxE,OAAS,KACpCuF,EAAId,MAAQc,EAAId,MAAMqB,MAAM,GAAI,MA8BlC,CACEJ,MAlB0B,IAAIL,OAChC,aAAaG,EAAb,qBAAiDL,EAAjD,oBACA,KAiBEQ,QAf2B,CAAEpB,OAAQ,EAAGC,KAAM,GAgB9CoB,WAAYN,GAEd,CACEI,MAduB,IAAIL,OAC7B,iEAAiCF,EAAjC,YACA,KAaEQ,QAXwB,CAAEpB,OAAQ,EAAGC,KAAM,GAY3CoB,WAAYN,IAGPvF,EAAI,EAAGA,EAAI0F,EAAOzF,OAAQD,IAAK,CACtC,IAAMgG,EAAQN,EAAO1F,GACfiG,EAAWD,EAAML,MAAMO,KAAKpD,GAClC,GAAImD,EAAU,CACZ,IAAME,EAAcF,EAASD,EAAMJ,QAAQpB,QACvC4B,EAAYH,EAASD,EAAMJ,QAAQnB,MAClC2B,IACHA,EAAY,IAEdjB,EAAW,IAAIZ,EAAS4B,EAAaC,GACrCJ,EAAMH,WAAWV,GACjB,OAGJ,GAAgB,MAAZA,EACF,eNsEqBrC,GACzB,OAAO,IAAIjG,EAAqB,cAE9B,gBAAkBiG,EAAM,KAE5B,CM3EYuD,CAAWvD,GAEnB,OAAOqC,GAEXZ,CAAA,CA3GA,GCRA+B,EAAA,WAGE,SAAAA,EAAYC,GACV5I,KAAK6I,SAAWhE,QAAQiE,OAAUF,GAUtC,OANED,EAAA9I,UAAAkJ,WAAA,WACE,OAAO/I,KAAK6I,UAIdF,EAAA9I,UAAAmJ,OAAA,SAAOC,GAAkB,EAC3BN,CAAA,CAdA,YCUgBO,EAASC,GACvB,MAAoB,kBAANA,GAAkBA,aAAaC,MAC/C,UAEgBC,EAAaF,GAC3B,OAAOG,KAAyBH,aAAaI,IAC/C,UAEgBD,IACd,MAAuB,qBAATC,IAChB,UAEgBC,EACdC,EACAC,EACAC,EACA7H,GAEA,GAAIA,EAAQ4H,EACV,MAAMpJ,EACJ,sBAAsBmJ,EAAQ,eAAeC,EAAQ,gBAGzD,GAAI5H,EAAQ6H,EACV,MAAMrJ,EACJ,sBAAsBmJ,EAAQ,eAAeE,EAAQ,YAG3D,UCrCgBC,EAAQC,GACtB,MAAO,WAAW7K,EAAY,MAAM6K,CACtC,UAEgBC,EAAgBC,GAC9B,IAAM9C,EAASC,mBACX8C,EAAY,IAChB,IAAK,IAAMvE,KAAOsE,EAAQ,CACxB,GAAIA,EAAOrE,eAAeD,GAExBuE,EAAYA,GADK/C,EAAOxB,GAAO,IAAMwB,EAAO8C,EAAOtE,KAChB,IAMvC,OADAuE,EAAYA,EAAU5B,MAAM,GAAI,EAElC,CCSA,IAAA6B,EAAA,WAuBE,SAAAA,EACE9E,EACAC,EACAE,EACAD,EACA6E,EACAC,EACAC,EACAC,EAGAC,EACAC,EACAC,GAbF,IAAAlL,EAAA,KAhBQ,KAAAmL,YAA4B,KAC5B,KAAAC,WAA+B,KAI/B,KAAAC,WAAqB,EACrB,KAAAC,YAAsB,EAyB5B5K,KAAK6K,KAAO1F,EACZnF,KAAK8K,QAAU1F,EACfpF,KAAK+K,SAAWzF,EAChBtF,KAAKgL,MAAQ3F,EACbrF,KAAKiL,cAAgBf,EAAa9B,QAClCpI,KAAKkL,sBAAwBf,EAAqB/B,QAClDpI,KAAKmL,UAAYf,EACjBpK,KAAKoL,eAAiBf,EACtBrK,KAAKqL,kBAAoBd,EACzBvK,KAAKsL,SAAWhB,EAChBtK,KAAKuL,MAAQf,EACbxK,KAAK6I,SAAW,IAAIhE,SAAQ,SAACC,EAASgE,GACpCxJ,EAAKkM,SAAW1G,EAChBxF,EAAKmM,QAAU3C,EACfxJ,EAAKoM,YAyIX,OAlIUzB,EAAApK,UAAA6L,OAAR,WACE,IAAMC,EAAO3L,KAoDb,SAAS4L,EACPC,EACA9F,GAEA,IA4BY+F,EA5BNhH,EAAU6G,EAAKH,SACf1C,EAAS6C,EAAKF,QACdM,EAAMhG,EAAOgG,IACnB,GAAIhG,EAAOiG,eACT,IACE,IAAMC,EAASN,EAAKR,UAAUY,EAAKA,EAAI/F,wBFtJlC,IEuJSiG,EACZnH,EAAQmH,GAERnH,IAEF,MAAO7C,GACP6G,EAAO7G,QAGG,OAAR8J,IACID,EAAM3L,KACRT,eAAiBqM,EAAI/F,kBACrB2F,EAAKP,eACPtC,EAAO6C,EAAKP,eAAeW,EAAKD,IAEhChD,EAAOgD,IAGL/F,EAAO3F,SAET0I,EADMgD,EAAMH,EAAKf,WAAarK,IAAeH,KAI7C0I,EADMgD,EV3BT,IAAI5M,EAAqB,uBAE9B,6DU+BIc,KAAK2K,UACPiB,EAAY,EAAO,IAAIM,GAAiB,EAAO,MAAM,IAErDlM,KAAK0K,oBC1KTyB,EAEA/B,EACAE,GAIA,IAAI8B,EAAc,EAIdC,EAAiB,KACjBC,GAAa,EACbC,EAAc,EAElB,SAASnM,IACP,OAAuB,IAAhBmM,EAET,IAAIC,GAAoB,EAExB,SAASC,QAAgB,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAtK,OAAAqK,IAAAD,EAAAC,GAAAC,UAAAD,GAClBH,IACHA,GAAoB,EACpBpC,EAASyC,MAAM,KAAMH,IAIzB,SAASI,EAAcC,GACrBV,EAAYW,YAAW,WACrBX,EAAY,KACZF,EAAEc,EAAS7M,OACV2M,GAGL,SAASE,EAAQC,OAAkB,IAiB7BC,EAjB6BT,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAtK,OAAAqK,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,GAC7BH,IAGAU,GAIa9M,KAAckM,EAH7BG,EAAgBlN,KAAIsN,MAApBJ,GAAeW,EAAAA,EAAAA,IAAA,CAAM,KAAMF,GAAYR,KAQrCN,EAAc,KAEhBA,GAAe,GAGG,IAAhBG,GACFA,EAAc,EACdY,EAAa,GAEbA,EAA6C,KAA/Bf,EAAciB,KAAKC,UAEnCR,EAAcK,KAEhB,IAAII,GAAU,EAEd,SAASC,EAAKC,GACRF,IAGJA,GAAU,EACNf,IAGc,OAAdH,GACGoB,IACHlB,EAAc,GAEhBmB,aAAarB,GACbS,EAAc,IAETW,IACHlB,EAAc,KASpB,OALAO,EAAc,GACdE,YAAW,WACTV,GAAa,EACbkB,GAAK,KACJlD,GACIkD,CACT,CDkFwBG,EA3FpB,SACEC,EACAxN,GAEA,GAAIA,EACFwN,GAAgB,EAAO,IAAI1B,GAAiB,EAAO,MAAM,QAD3D,CAIA,IAAMH,EAAMJ,EAAKJ,MAAM5E,cACvBgF,EAAKlB,YAAcsB,EASY,OAA3BJ,EAAKN,mBACPU,EAAI1F,0BAA0BwH,GAIhC9B,EACG7G,KAAKyG,EAAKd,KAAMc,EAAKb,QAASa,EAAKX,MAAOW,EAAKZ,UAC/C+C,MAAK,SAAC/B,GAC0B,OAA3BJ,EAAKN,mBACPU,EAAIvF,6BAA6BqH,GAEnClC,EAAKlB,YAAc,KAEnB,IAAMsD,EAAYhC,EAAIlG,iBAAmBlC,EAAUgB,SAC7CoB,EAASgG,EAAIjG,YACnB,GAAKiI,IAAapC,EAAKqC,mBAAmBjI,GAA1C,CAQA,IAAMkI,GAAsD,IAAxCtC,EAAKV,cAAcrI,QAAQmD,GAC/C6H,GAAgB,EAAM,IAAI1B,EAAiB+B,EAAalC,QATxD,CACE,IAAMmC,EAAcnC,EAAIlG,iBAAmBlC,EAAUqB,MACrD4I,GACE,EACA,IAAI1B,GAAiB,EAAO,KAAMgC,QA1B1C,SAASL,EAAiBM,GACxB,IAAMC,EAASD,EAAcC,OACvBC,EAAQF,EAAcG,iBAAmBH,EAAcE,OAAS,EACvC,OAA3B1C,EAAKN,mBACPM,EAAKN,kBAAkB+C,EAAQC,MA4EGzC,EAAa5L,KAAKsL,WAK5DrB,EAAApK,UAAAkJ,WAAA,WACE,OAAO/I,KAAK6I,UAIdoB,EAAApK,UAAAmJ,OAAA,SAAOuF,GACLvO,KAAK2K,WAAY,EACjB3K,KAAK4K,WAAa2D,IAAa,EACP,OAApBvO,KAAK0K,aACP8C,EAAKxN,KAAK0K,aCtFX,GDwFwB,OAArB1K,KAAKyK,aACPzK,KAAKyK,YAAYvE,SAIb+D,EAAApK,UAAAmO,mBAAR,SAA2BjI,GAGzB,IAAMyI,EAAoBzI,GAAU,KAAOA,EAAS,IAO9C0I,GAAwD,IANtC,CAEtB,IAEA,KAEuC7L,QAAQmD,GAC3C2I,GAC4C,IAAhD1O,KAAKkL,sBAAsBtI,QAAQmD,GACrC,OAAOyI,GAAqBC,GAAoBC,GAEpDzE,CAAA,CA7LA,GAmMAiC,EAME,SACSF,EACAD,EACP3L,GAFO,KAAA4L,eAAAA,EACA,KAAAD,IAAAA,EAGP/L,KAAKI,WAAaA,GEvOtB,SAASuO,IACP,MAA2B,qBAAhBC,YACFA,YAC+B,qBAAtBC,kBACTA,uBAEP,CAEJ,UAQgBC,QAAQ,IAAApC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAtK,OAAAqK,IAAAD,EAAAC,GAAAC,UAAAD,GACtB,IAAMiC,EAAcD,IACpB,QAAoBnJ,IAAhBoJ,EAA2B,CAE7B,IADA,IAAMG,EAAK,IAAIH,EACNvM,EAAI,EAAGA,EAAIqK,EAAKpK,OAAQD,IAC/B0M,EAAGC,OAAOtC,EAAKrK,IAEjB,OAAO0M,EAAGD,UAEV,GAAIxF,IACF,OAAO,IAAIC,KAAKmD,GAEhB,MAAM,IAAIxN,EAAqB,0BAE7B,sDAIR,CCzBA,IAAA+P,EAAA,WAKE,SAAAA,EAAY9N,EAAuC+N,GACjD,IAAIC,EAAe,EACfC,EAAmB,GACnB/F,EAAalI,IACfnB,KAAKqP,MAAQlO,EACbgO,EAAQhO,EAAcgO,KACtBC,EAAYjO,EAAcmO,MACjBnO,aAAgBoO,aACrBL,EACFlP,KAAKqP,MAAQ,IAAI3M,WAAWvB,IAE5BnB,KAAKqP,MAAQ,IAAI3M,WAAWvB,EAAKqO,YACjCxP,KAAKqP,MAAMI,IAAI,IAAI/M,WAAWvB,KAEhCgO,EAAOnP,KAAKqP,MAAM/M,QACTnB,aAAgBuB,aACrBwM,EACFlP,KAAKqP,MAAQlO,GAEbnB,KAAKqP,MAAQ,IAAI3M,WAAWvB,EAAKmB,QACjCtC,KAAKqP,MAAMI,IAAItO,IAEjBgO,EAAOhO,EAAKmB,QAEdtC,KAAK0P,MAAQP,EACbnP,KAAK2P,MAAQP,EAsEjB,OAnEEH,EAAApP,UAAAsP,KAAA,WACE,OAAOnP,KAAK0P,OAGdT,EAAApP,UAAAyP,KAAA,WACE,OAAOtP,KAAK2P,OAGdV,EAAApP,UAAAuI,MAAA,SAAMwH,EAAmBC,GACvB,GAAIxG,EAAarJ,KAAKqP,OAAQ,CAC5B,IACMS,WDRcC,EAAYpC,EAAelK,GACnD,OAAIsM,EAAKC,YACAD,EAAKC,YAAYrC,EAAOlK,GACtBsM,EAAKE,SACPF,EAAKE,SAAStC,EAAOlK,GACnBsM,EAAK3H,MACP2H,EAAK3H,MAAMuF,EAAOlK,GAEpB,IACT,CCDqByM,CADElQ,KAAKqP,MACaO,EAAWC,GAC9C,OAAe,OAAXC,EACK,KAEF,IAAIb,EAAQa,GAOnB,OAAO,IAAIb,EALG,IAAIvM,WACf1C,KAAKqP,MAAqBc,OAC3BP,EACAC,EAAUD,IAEc,IAIvBX,EAAAH,QAAP,eAAe,IAAApC,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAtK,OAAAqK,IAAAD,EAAAC,GAAAC,UAAAD,GACb,GAAIrD,IAAuB,CACzB,IAAM8G,EAA4C1D,EAAK2D,KACrD,SAACC,GACC,OAAIA,aAAerB,EACVqB,EAAIjB,MAEJiB,KAIb,OAAO,IAAIrB,EAAQH,EAAQjC,MAAM,KAAMuD,IAEvC,IAAMG,EAA4B7D,EAAK2D,KACrC,SAACC,GACC,OAAIpH,EAASoH,GACJjP,EAAeR,EAAaC,IAAKwP,GAAenP,KAG/CmP,EAAgBjB,SAI1BmB,EAAc,EAClBD,EAAYE,SAAQ,SAACtN,GACnBqN,GAAerN,EAAMqM,cAEvB,IAAMkB,EAAS,IAAIhO,WAAW8N,GAC1BG,EAAQ,EAMZ,OALAJ,EAAYE,SAAQ,SAACtN,GACnB,IAAK,IAAId,EAAI,EAAGA,EAAIc,EAAMb,OAAQD,IAChCqO,EAAOC,KAAWxN,EAAMd,MAGrB,IAAI4M,EAAQyB,GAAQ,IAI/BzB,EAAApP,UAAA+Q,WAAA,WACE,OAAO5Q,KAAKqP,OAEhBJ,CAAA,CApGA,YCXgB4B,EACdrN,GAEA,IAAIsN,ENG2B3H,EMF/B,IACE2H,EAAMC,KAAKC,MAAMxN,GACjB,MAAOvB,GACP,OAAO,KAET,MNFoB,kBADWkH,EMGV2H,INFYG,MAAMC,QAAQ/H,GMKtC,KAFA2H,CAIX,UCkBgBK,EAAcrK,GAC5B,IAAMsK,EAAQtK,EAAKuK,YAAY,IAAKvK,EAAKxE,OAAS,GAClD,OAAe,IAAX8O,EACKtK,EAEAA,EAAKsB,MAAMgJ,EAAQ,EAE9B,UC/BgBE,EAAYC,EAAoBzP,GAC9C,OAAOA,CACT,CAEA,IAAA0P,EAKE,SACSC,EACPC,EACAC,EACAC,GAHO,KAAAH,OAAAA,EAKPzR,KAAK0R,MAAQA,GAASD,EACtBzR,KAAK2R,WAAaA,EAClB3R,KAAK4R,MAAQA,GAASN,GAOtBO,EAA6B,cAUjBC,IACd,GAAID,EACF,OAAOA,EAET,IAAME,EAAqB,GAC3BA,EAAStP,KAAK,IAAI+O,EAAgB,WAClCO,EAAStP,KAAK,IAAI+O,EAAgB,eAClCO,EAAStP,KAAK,IAAI+O,EAAgB,mBAClCO,EAAStP,KAAK,IAAI+O,EAAgB,OAAQ,YAAY,IAQtD,IAAMQ,EAAc,IAAIR,EAAgB,QACxCQ,EAAYJ,MAPZ,SACEK,EACAC,GAEA,gBAtBsBA,GACxB,OAAKhJ,EAASgJ,IAAaA,EAAS5P,OAAS,EACpC4P,EAEAf,EAAce,EAEzB,CAgBWC,CAAUD,IAInBH,EAAStP,KAAKuP,GAed,IAAMI,EAAc,IAAIZ,EAAgB,QAaxC,OAZAY,EAAYR,MAXZ,SACEK,EACA9C,GAEA,YAAa3J,IAAT2J,EACKkD,OAAOlD,GAEPA,GAKX4C,EAAStP,KAAK2P,GACdL,EAAStP,KAAK,IAAI+O,EAAgB,gBAClCO,EAAStP,KAAK,IAAI+O,EAAgB,YAClCO,EAAStP,KAAK,IAAI+O,EAAgB,UAAW,MAAM,IACnDO,EAAStP,KAAK,IAAI+O,EAAgB,eAAgB,MAAM,IACxDO,EAAStP,KAAK,IAAI+O,EAAgB,qBAAsB,MAAM,IAC9DO,EAAStP,KAAK,IAAI+O,EAAgB,kBAAmB,MAAM,IAC3DO,EAAStP,KAAK,IAAI+O,EAAgB,kBAAmB,MAAM,IAC3DO,EAAStP,KAAK,IAAI+O,EAAgB,cAAe,MAAM,IACvDO,EAAStP,KAAK,IAAI+O,EAAgB,WAAY,kBAAkB,IAChEK,EAAYE,CAEd,UAYgBO,EACdC,EACAC,EACAT,GAKA,IAHA,IAAMR,EAAqB,CAC3BA,KAAmB,QACbkB,EAAMV,EAASzP,OACZD,EAAI,EAAGA,EAAIoQ,EAAKpQ,IAAK,CAC5B,IAAMqQ,EAAUX,EAAS1P,GACzBkP,EAASmB,EAAQhB,OAAUgB,EAA6Bd,MACtDL,EACAiB,EAASE,EAAQjB,SAIrB,gBA1BqBF,EAAoBgB,GAOzC5S,OAAOM,eAAesR,EAAU,MAAO,CAAEoB,IANzC,WACE,IAAM9L,EAAiB0K,EAAiB,OAClCzK,EAAeyK,EAAmB,SAClC1J,EAAM,IAAIjB,EAASC,EAAQC,GACjC,OAAOyL,EAAQK,sBAAsB/K,KAGzC,CAiBEgL,CAAOtB,EAAUgB,GACVhB,CACT,UAEgBuB,EACdP,EACAQ,EACAhB,GAEA,IAAMjB,EAAMD,EAAiBkC,GAC7B,OAAY,OAARjC,EACK,KAGFwB,EAAaC,EADHzB,EACsBiB,EACzC,UAmCgBiB,EACdzB,EACAQ,GAMA,IAJA,IAAMS,EAEF,CAAC,EACCC,EAAMV,EAASzP,OACZD,EAAI,EAAGA,EAAIoQ,EAAKpQ,IAAK,CAC5B,IAAMqQ,EAAUX,EAAS1P,GACrBqQ,EAAQf,WACVa,EAASE,EAAQjB,QAAUF,EAASmB,EAAQhB,QAGhD,OAAOX,KAAKkC,UAAUT,EACxB,CC/JA,IAAMU,EAAe,WACfC,GAAY,iBAiCFC,GACdb,EACA1L,EACAkM,GAEA,IAAMjC,EAAMD,EAAiBkC,GAC7B,OAAY,OAARjC,EACK,KAtCX,SACEyB,EACA1L,EACA2L,GAEA,IAAMa,EAAyB,CAC7BC,SAAU,GACVC,MAAO,GACPC,cAAehB,EAAwB,eAEzC,GAAIA,EAASU,GACX,IAAmB,IAAAvG,EAAA,EAAA8G,EAAAjB,EAASU,GAATvG,EAAA8G,EAAAnR,OAAAqK,IAAwB,CAAtC,IACG+G,EADOD,EAAA9G,GACyB3J,QAAQ,MAAO,IAC/C2Q,EAAYpB,EAAQK,sBACxB,IAAIhM,EAASC,EAAQ6M,IAEvBL,EAAWC,SAAS7Q,KAAKkR,GAI7B,GAAInB,EAASW,IACX,IAAmB,IAAAS,EAAA,EAAAC,EAAArB,EAASW,IAATS,EAAAC,EAAAvR,OAAAsR,IAAqB,CAAnC,IAAME,EAAID,EAAAD,GACPD,EAAYpB,EAAQK,sBACxB,IAAIhM,EAASC,EAAQiN,EAAW,OAElCT,EAAWE,MAAM9Q,KAAKkR,GAG1B,OAAON,CACT,CAYSU,CAAoBxB,EAAS1L,EADlBiK,EAEpB,CC/DA,IAAAkD,GAiBE,SACS7O,EACAC,EAQA6H,EACA3C,GAVA,KAAAnF,IAAAA,EACA,KAAAC,OAAAA,EAQA,KAAA6H,QAAAA,EACA,KAAA3C,QAAAA,EA3BT,KAAA2J,UAAuB,CAAC,EACxB,KAAA3O,QAAmB,CAAC,EACpB,KAAAD,KAA0C,KAE1C,KAAA6O,aAEW,KAMX,KAAA3J,iBAA8D,KAC9D,KAAAL,aAAyB,CAAC,KAC1B,KAAAC,qBAAiC,aCUnBgK,GAAaC,GAC3B,IAAKA,EACH,MAAMjU,GAEV,UAEgBkU,GACd9B,EACAR,GAOA,OALA,SAAiBhG,EAAYuI,GAC3B,IAAM/C,EAAWuB,EAAmBP,EAAS+B,EAAMvC,GAEnD,OADAoC,GAA0B,OAAb5C,GACNA,EAGX,UAcgBgD,GACdhC,EACAR,GAOA,OALA,SAAiBhG,EAAYuI,GAC3B,IAAM/C,EAAWuB,EAAmBP,EAAS+B,EAAMvC,GAEnD,OADAoC,GAA0B,OAAb5C,YHqEfA,EACAwB,GAEA,IAAMjC,EAAMD,EAAiBkC,GAC7B,GAAY,OAARjC,EACF,OAAO,KAET,IAAK5H,EAAS4H,EAAoB,gBAGhC,OAAO,KAET,IAAM0D,EAAiB1D,EAAoB,eAC3C,GAAsB,IAAlB0D,EAAOlS,OACT,OAAO,KAET,IAAM2E,EAASC,mBAaf,OAZmBsN,EAAOC,MAAM,KACRpE,KAAI,SAACqE,GAC3B,IAAM7N,EAAiB0K,EAAiB,OAClCzK,EAAeyK,EAAmB,SAOxC,OALa3H,EADG,MAAQ3C,EAAOJ,GAAU,MAAQI,EAAOH,IAEpCgD,EAAgB,CAClC6K,IAAK,QACLD,MAAKA,OAIG,EACd,CGlGWE,CAA8BrD,EAAsB+C,GAG/D,UAEgBO,GACdrN,GAuBA,OArBA,SACEuE,EACAD,GAEA,IAAIgJ,EnB0DqBhO,EAjBCD,EmB1B1B,OAdwB,MAApBkF,EAAIjG,YACNgP,EnBqDG,IAAI5V,EAAqB,kBAF9B,+FmBjD0B,MAApB6M,EAAIjG,anBqCgBe,EmBpCCW,EAASX,OAAhCiO,EnBqCC,IAAI5V,EAAqB,iBAE9B,qBACE2H,EADF,2EmBrC4B,MAApBkF,EAAIjG,anBmDagB,EmBlDGU,EAASV,KAA/BgO,EnBmDD,IAAI5V,EAAqB,eAE9B,4CAA8C4H,EAAO,OmBnD/CgO,EAAShJ,EAIfgJ,EAAOpV,eAAiBoM,EAAIpM,eACrBoV,EAGX,UAEgBC,GACdvN,GAEA,IAAMwN,EAASH,GAAmBrN,GAalC,OAXA,SACEuE,EACAD,GAEA,InBT2BhF,EmBSvBgO,EAASE,EAAOjJ,EAAKD,GAKzB,OAJwB,MAApBC,EAAIjG,cnBVmBgB,EmBWDU,EAASV,KAAjCgO,EnBVG,IAAI5V,EAAqB,mBAE9B,WAAa4H,EAAO,sBmBUpBgO,EAAOpV,eAAiBoM,EAAIpM,eACrBoV,EAGX,UAEgBG,GACd1C,EACA/K,EACAuK,GAEA,IACM5M,EAAMyE,EADIpC,EAASR,iBAGnBsD,EAAUiI,EAAQ2C,sBAClBC,EAAc,IAAInB,GACtB7O,EAHa,MAKbkP,GAAgB9B,EAASR,GACzBzH,GAGF,OADA6K,EAAYjB,aAAea,GAAmBvN,GACvC2N,CACT,UAEgBC,GACd7C,EACA/K,EACA6N,EACAC,EACAC,GAEA,IAAMtB,EAAuB,CAAC,EAC1BzM,EAASgO,OACXvB,EAAkB,OAAI,GAEtBA,EAAkB,OAAIzM,EAASV,KAAO,IAEpCuO,GAAaA,EAAU/S,OAAS,IAClC2R,EAAqB,UAAIoB,GAEvBC,IACFrB,EAAqB,UAAIqB,GAEvBC,IACFtB,EAAsB,WAAIsB,GAE5B,IACMpQ,EAAMyE,EADIpC,EAASL,uBAGnBmD,EAAUiI,EAAQ2C,sBAClBC,EAAc,IAAInB,GACtB7O,EAHa,eAhHfoN,EACA1L,GAOA,OALA,SAAiBkF,EAAYuI,GAC3B,IAAMjB,EAAaD,GAAmBb,EAAS1L,EAAQyN,GAEvD,OADAH,GAA4B,OAAfd,GACNA,EAGX,CA4GIoC,CAAYlD,EAAS/K,EAASX,QAC9ByD,GAIF,OAFA6K,EAAYlB,UAAYA,EACxBkB,EAAYjB,aAAeW,GAAmBrN,GACvC2N,CACT,UAwEgBO,GACdlO,EACAuI,EACAwB,GAEA,IAAMoE,EAAgBhW,OAAOiW,OAAO,CAAC,EAAGrE,GAMxC,OALAoE,EAAwB,SAAInO,EAASV,KACrC6O,EAAoB,KAAI5F,EAAKZ,OACxBwG,EAA2B,cAC9BA,EAA2B,qBAnB7BpE,EACAxB,GAEA,OACGwB,GAAYA,EAAsB,aAClCxB,GAAQA,EAAKT,QACd,0BAEJ,CAWmCuG,CAAsB,KAAM9F,IAEtD4F,CACT,CAqEA,IAAAG,GAIE,SACSC,EACA1H,EACP2H,EACAzE,GAHO,KAAAwE,QAAAA,EACA,KAAA1H,MAAAA,EAIPrO,KAAKgW,YAAcA,EACnBhW,KAAKuR,SAAWA,GAAY,eAIhB0E,GAAmBlK,EAAYmK,GAC7C,IAAInQ,EAAwB,KAC5B,IACEA,EAASgG,EAAI5F,kBAAkB,wBAC/B,MAAOlE,GACPkS,IAAa,GAIf,OADAA,KAAepO,IAA6C,KADtCmQ,GAAW,CAAC,WACKtT,QAAQmD,IACxCA,CACT,CAoFO,IAAMoQ,GAAsC,gBAWnCC,GACd5O,EACA+K,EACApN,EACA4K,EACAsG,EACAtE,EACAhM,EACAwE,GAIA,IAAM+L,EAAU,IAAIR,GAAsB,EAAG,GAQ7C,GAPI/P,GACFuQ,EAAQP,QAAUhQ,EAAOgQ,QACzBO,EAAQjI,MAAQtI,EAAOsI,QAEvBiI,EAAQP,QAAU,EAClBO,EAAQjI,MAAQ0B,EAAKZ,QAEnBY,EAAKZ,SAAWmH,EAAQjI,MAC1B,MnB5PK,IAAInP,EAAqB,yBAE9B,wEmB4PF,IAAMqX,EAAYD,EAAQjI,MAAQiI,EAAQP,QACtCS,EAAgBD,EAChBF,EAAY,IACdG,EAAgBnJ,KAAKoJ,IAAID,EAAeH,IAE1C,IAAMzG,EAAY0G,EAAQP,QACpBlG,EAAUD,EAAY4G,EAGtBlR,EAAU,CACd,wBAFAkR,IAAkBD,EAAY,mBAAqB,SAGnD,uBAAwBD,EAAQP,SAE5B1Q,EAAO0K,EAAK3H,MAAMwH,EAAWC,GACnC,GAAa,OAATxK,EACF,MAAMhF,IAwBR,IACMiK,EAAUiI,EAAQmE,mBAClBvB,EAAc,IAAInB,GAAY7O,EAFrB,QArBf,SAAiB4G,EAAYuI,GAK3B,IAGI/C,EAHEoF,EAAeV,GAAmBlK,EAAK,CAAC,SAAU,UAClD6K,EAAaN,EAAQP,QAAUS,EAC/BrH,EAAOY,EAAKZ,OAOlB,OAJEoC,EADmB,UAAjBoF,EACStC,GAAgB9B,EAASR,EAAzBsC,CAAmCtI,EAAKuI,GAExC,KAEN,IAAIwB,GACTc,EACAzH,EACiB,UAAjBwH,EACApF,KAKsDjH,GAK1D,OAJA6K,EAAY7P,QAAUA,EACtB6P,EAAY9P,KAAOA,EAAKuL,aACxBuE,EAAY5K,iBAAmBA,GAAoB,KACnD4K,EAAYjB,aAAeW,GAAmBrN,GACvC2N,CACT,CCndA,IAAA0B,GAKE,SACEC,EACAlO,EACAmO,GAIA,GZxDkB,oBYuDLD,GAA4B,MAATlO,GAA6B,MAAZmO,EAE/C/W,KAAKgX,KAAOF,EACZ9W,KAAK4I,MAAQA,EACb5I,KAAK+W,SAAWA,MACX,CACL,IAAME,EAAWH,EAKjB9W,KAAKgX,KAAOC,EAASD,KACrBhX,KAAK4I,MAAQqO,EAASrO,MACtB5I,KAAK+W,SAAWE,EAASF,oBCtEfG,GAAM/K,GACpB,OAAO,eAAC,IAAAgL,EAAA,GAAAxK,EAAA,EAAAA,EAAAC,UAAAtK,OAAAqK,IAAAwK,EAAAxK,GAAAC,UAAAD,GAEN9H,QAAQC,UAAUgJ,MAAK,WAAM,OAAA3B,EAACU,WAAC,EAAGsK,EAAa,IAEnD,CCiCA,IAAAC,GAAA,WAsCE,SAAAA,EAAYC,EAAgBtH,EAAewB,GAA3C,IAAAjS,EAAA,UAA2C,IAAAiS,IAAAA,EAAA,MAxB3C,KAAA+F,aAAuB,EACf,KAAAC,oBAA8B,EAC9B,KAAAC,sBAAgC,EAChC,KAAAC,WAAyD,GAMzD,KAAAC,YAAgClS,EAChC,KAAAmS,gBAAsBnS,EACtB,KAAAoS,cAA8BpS,EAC9B,KAAAqS,iBAA2B,EAG3B,KAAAC,cAA8CtS,EAC9C,KAAAuS,aAA+CvS,EASrDxF,KAAKgY,KAAOX,EACZrX,KAAKiY,MAAQlI,EACb/P,KAAKiS,UAAYV,EACjBvR,KAAKkY,UAAYpG,IACjB9R,KAAKmY,WAAanY,KAAKoY,mBAAmBpY,KAAKiY,OAC/CjY,KAAKqY,OAAS,UACdrY,KAAKsY,cAAgB,SAAA1P,GACnBtJ,EAAKsY,cAAWpS,EAChBlG,EAAKuY,iBAAmB,EACpBjP,EAAM7I,YAAY,aACpBT,EAAKiY,oBAAqB,EAC1BjY,EAAKiZ,yBAELjZ,EAAKoY,OAAS9O,EACdtJ,EAAKkZ,YAAY,WAGrBxY,KAAKyY,sBAAwB,SAAA7P,GAC3BtJ,EAAKsY,cAAWpS,EACZoD,EAAM7I,YAAY,YACpBT,EAAKiZ,wBAELjZ,EAAKoY,OAAS9O,EACdtJ,EAAKkZ,YAAY,WAGrBxY,KAAK0Y,SAAW,IAAI7T,SAAQ,SAACC,EAASgE,GACpCxJ,EAAKwY,SAAWhT,EAChBxF,EAAKyY,QAAUjP,EACfxJ,EAAKqZ,YAKP3Y,KAAK0Y,SAAS5K,KAAK,MAAM,eAof7B,OAjfUsJ,EAAAvX,UAAA+Y,sBAAR,eAAAtZ,EAAA,KACQuZ,EAAa7Y,KAAKsX,aACxB,OAAO,SAAAlJ,GAAU,OAAA9O,EAAKwZ,gBAAgBD,EAAazK,EAAO,GAGpDgJ,EAAAvX,UAAAuY,mBAAR,SAA2BrI,GACzB,OAAOA,EAAKZ,OAAS,QAGfiI,EAAAvX,UAAA8Y,OAAR,WACsB,YAAhB3Y,KAAKqY,aAIa7S,IAAlBxF,KAAK4X,WAGL5X,KAAKmY,gBACiB3S,IAApBxF,KAAK2X,WACP3X,KAAK+Y,mBAED/Y,KAAKuX,mBACPvX,KAAKgZ,eAEDhZ,KAAKwX,qBAEPxX,KAAKiZ,iBAELjZ,KAAKkZ,kBAKXlZ,KAAKmZ,mBAID/B,EAAAvX,UAAAuZ,cAAR,SAAsBhP,GAAtB,IAAA9K,EAAA,KAEEU,KAAKgY,KAAKqB,QAAQC,gBAAgBxL,MAAK,SAAAyL,GACrC,OAAQja,EAAK+Y,QACX,IAAK,UACHjO,EAASmP,GACT,MACF,IAAK,YACHja,EAAKkZ,YAAY,YACjB,MACF,IAAK,UACHlZ,EAAKkZ,YAAY,eASjBpB,EAAAvX,UAAAkZ,iBAAR,eAAAzZ,EAAA,KACEU,KAAKoZ,eAAc,SAAAG,GACjB,IAAMpE,WHkLV5C,EACA/K,EACAuK,EACAhC,EACAwB,GAEA,IAAM1H,EAAUrC,EAASL,sBACnBqS,EAAoB9D,GAAmBlO,EAAUuI,EAAMwB,GACvD0C,EAAuB,CAAExT,KAAM+Y,EAA4B,UAC3DrU,EAAMyE,EAAQC,GAEdvE,EAAU,CACd,yBAA0B,YAC1B,wBAAyB,QACzB,sCAAuCyK,EAAKZ,OAC5C,oCAAqCqK,EAA+B,YACpE,eAAgB,mCAEZnU,EAAO2N,EAAiBwG,EAAmBzH,GAC3CzH,EAAUiI,EAAQmE,mBAalBvB,EAAc,IAAInB,GAAY7O,EAtBrB,QAWf,SAAiB4G,GAEf,IAAI5G,EADJ8Q,GAAmBlK,GAEnB,IACE5G,EAAM4G,EAAI5F,kBAAkB,qBAC5B,MAAOlE,GACPkS,IAAa,GAGf,OADAA,GAAajL,EAAS/D,IACfA,IAEiDmF,GAK1D,OAJA6K,EAAYlB,UAAYA,EACxBkB,EAAY7P,QAAUA,EACtB6P,EAAY9P,KAAOA,EACnB8P,EAAYjB,aAAeW,GAAmBrN,GACvC2N,CACT,CGxN0BsE,CAClBna,EAAK0Y,KAAKqB,QACV/Z,EAAK0Y,KAAK0B,UACVpa,EAAK4Y,UACL5Y,EAAK2Y,MACL3Y,EAAK2S,WAED0H,EAAgBra,EAAK0Y,KAAKqB,QAAQO,aACtCzE,EACAoE,GAEFja,EAAKsY,SAAW+B,EAChBA,EAAc5Q,aAAa+E,MAAK,SAAC3I,GAC/B7F,EAAKsY,cAAWpS,EAChBlG,EAAKqY,WAAaxS,EAClB7F,EAAKiY,oBAAqB,EAC1BjY,EAAKiZ,yBACJjZ,EAAKgZ,mBAIJlB,EAAAvX,UAAAmZ,aAAR,eAAA1Z,EAAA,KAEQ6F,EAAMnF,KAAK2X,WACjB3X,KAAKoZ,eAAc,SAAAG,GACjB,IAAMpE,WHqMV5C,EACA/K,EACArC,EACA4K,GAsBA,IACMzF,EAAUiI,EAAQmE,mBAClBvB,EAAc,IAAInB,GAAY7O,EAFrB,QAlBf,SAAiB4G,GACf,IAAMhG,EAASkQ,GAAmBlK,EAAK,CAAC,SAAU,UAC9C8N,EAA4B,KAChC,IACEA,EAAa9N,EAAI5F,kBAAkB,+BACnC,MAAOlE,GACPkS,IAAa,GAGV0F,GAEH1F,IAAa,GAGf,IAAMhF,EAAOkD,OAAOwH,GAEpB,OADA1F,IAAc2F,MAAM3K,IACb,IAAI2G,GAAsB3G,EAAMY,EAAKZ,OAAmB,UAAXpJ,KAIIuE,GAG1D,OAFA6K,EAAY7P,QAvBI,CAAE,wBAAyB,SAwB3C6P,EAAYjB,aAAeW,GAAmBrN,GACvC2N,CACT,CGpO0B4E,CAClBza,EAAK0Y,KAAKqB,QACV/Z,EAAK0Y,KAAK0B,UACVvU,EACA7F,EAAK2Y,OAED+B,EAAgB1a,EAAK0Y,KAAKqB,QAAQO,aACtCzE,EACAoE,GAEFja,EAAKsY,SAAWoC,EAChBA,EAAcjR,aAAa+E,MAAK,SAAA/H,GAE9BzG,EAAKsY,cAAWpS,EAChBlG,EAAKwZ,gBAAgB/S,EAAOgQ,SAC5BzW,EAAKiY,oBAAqB,EACtBxR,EAAOiQ,YACT1W,EAAKkY,sBAAuB,GAE9BlY,EAAKiZ,yBACJjZ,EAAKgZ,mBAIJlB,EAAAvX,UAAAqZ,gBAAR,eAAA5Z,EAAA,KACQ+W,EAAYF,GAA8BnW,KAAK6X,iBAC/C9R,EAAS,IAAI+P,GACjB9V,KAAKsX,aACLtX,KAAKiY,MAAM9I,QAIPhK,EAAMnF,KAAK2X,WACjB3X,KAAKoZ,eAAc,SAAAG,GACjB,IAAIpE,EACJ,IACEA,EAAciB,GACZ9W,EAAK0Y,KAAK0B,UACVpa,EAAK0Y,KAAKqB,QACVlU,EACA7F,EAAK2Y,MACL5B,EACA/W,EAAK4Y,UACLnS,EACAzG,EAAKsZ,yBAEP,MAAO3W,GAGP,OAFA3C,EAAKoY,OAASzV,OACd3C,EAAKkZ,YAAY,SAGnB,IAAMyB,EAAgB3a,EAAK0Y,KAAKqB,QAAQO,aACtCzE,EACAoE,GAEFja,EAAKsY,SAAWqC,EAChBA,EAAclR,aAAa+E,MAAK,SAACoM,GAC/B5a,EAAK6a,sBACL7a,EAAKsY,cAAWpS,EAChBlG,EAAKwZ,gBAAgBoB,EAAUnE,SAC3BmE,EAAUlE,WACZ1W,EAAK2S,UAAYiI,EAAU3I,SAC3BjS,EAAKkZ,YAAY,YAEjBlZ,EAAKiZ,yBAENjZ,EAAKgZ,mBAIJlB,EAAAvX,UAAAsa,oBAAR,WACsBhE,GAA8BnW,KAAK6X,iBAGrC,WAChB7X,KAAK6X,kBAAoB,IAIrBT,EAAAvX,UAAAoZ,eAAR,eAAA3Z,EAAA,KACEU,KAAKoZ,eAAc,SAAAG,GACjB,IAAMpE,EAAcF,GAClB3V,EAAK0Y,KAAKqB,QACV/Z,EAAK0Y,KAAK0B,UACVpa,EAAK4Y,WAEDkC,EAAkB9a,EAAK0Y,KAAKqB,QAAQO,aACxCzE,EACAoE,GAEFja,EAAKsY,SAAWwC,EAChBA,EAAgBrR,aAAa+E,MAAK,SAAAyD,GAChCjS,EAAKsY,cAAWpS,EAChBlG,EAAK2S,UAAYV,EACjBjS,EAAKkZ,YAAY,aAChBlZ,EAAKmZ,2BAIJrB,EAAAvX,UAAAsZ,eAAR,eAAA7Z,EAAA,KACEU,KAAKoZ,eAAc,SAAAG,GACjB,IAAMpE,WHvCV5C,EACA/K,EACAuK,EACAhC,EACAwB,GAEA,IAAM1H,EAAUrC,EAASL,sBACnB7B,EAAsC,CAC1C,yBAA0B,aAUtB+U,EAPN,WAEE,IADA,IAAIC,EAAM,GACDjY,EAAI,EAAGA,EAAI,EAAGA,IACrBiY,GAAYjN,KAAKC,SAAS1H,WAAWwC,MAAM,GAE7C,OAAOkS,EAEQC,GACjBjV,EAAQ,gBAAkB,+BAAiC+U,EAC3D,IAAMG,EAAY9E,GAAmBlO,EAAUuI,EAAMwB,GAE/CkJ,EACJ,KACAJ,EADA,4DAFqBrH,EAAiBwH,EAAWzI,GAOjD,SACAsI,EANA,qBASAG,EAAuB,YACvB,WACIE,EAAe,SAAWL,EAAW,KACrChV,EAAO4J,EAAQH,QAAQ2L,EAAa1K,EAAM2K,GAChD,GAAa,OAATrV,EACF,MAAMhF,IAER,IAAM4T,EAAuB,CAAExT,KAAM+Z,EAAoB,UACnDrV,EAAMyE,EAAQC,GAEdS,EAAUiI,EAAQmE,mBAClBvB,EAAc,IAAInB,GACtB7O,EAHa,OAKbkP,GAAgB9B,EAASR,GACzBzH,GAMF,OAJA6K,EAAYlB,UAAYA,EACxBkB,EAAY7P,QAAUA,EACtB6P,EAAY9P,KAAOA,EAAKuL,aACxBuE,EAAYjB,aAAeW,GAAmBrN,GACvC2N,CACT,CGf0BwF,CAClBrb,EAAK0Y,KAAKqB,QACV/Z,EAAK0Y,KAAK0B,UACVpa,EAAK4Y,UACL5Y,EAAK2Y,MACL3Y,EAAK2S,WAED2I,EAAmBtb,EAAK0Y,KAAKqB,QAAQO,aACzCzE,EACAoE,GAEFja,EAAKsY,SAAWgD,EAChBA,EAAiB7R,aAAa+E,MAAK,SAAAyD,GACjCjS,EAAKsY,cAAWpS,EAChBlG,EAAK2S,UAAYV,EACjBjS,EAAKwZ,gBAAgBxZ,EAAK2Y,MAAM9I,QAChC7P,EAAKkZ,YAAY,aAChBlZ,EAAKgZ,mBAIJlB,EAAAvX,UAAAiZ,gBAAR,SAAwB+B,GACtB,IAAMC,EAAM9a,KAAKsX,aACjBtX,KAAKsX,aAAeuD,EAKhB7a,KAAKsX,eAAiBwD,GACxB9a,KAAK+a,oBAID3D,EAAAvX,UAAA2Y,YAAR,SAAoBnU,GAClB,GAAIrE,KAAKqY,SAAWhU,EAGpB,OAAQA,GACN,IAAK,YASL,IAAK,UAGHrE,KAAKqY,OAAShU,OACQmB,IAAlBxF,KAAK4X,UACP5X,KAAK4X,SAAS5O,SAEhB,MACF,IAAK,UAIH,IAAMgS,EAA4B,WAAhBhb,KAAKqY,OACvBrY,KAAKqY,OAAShU,EACV2W,IACFhb,KAAK+a,mBACL/a,KAAK2Y,UAEP,MACF,IAAK,SAcL,IAAK,QAQL,IAAK,UAKH3Y,KAAKqY,OAAShU,EACdrE,KAAK+a,mBACL,MAvBF,IAAK,WAIH/a,KAAK0X,OAAStX,IACdJ,KAAKqY,OAAShU,EACdrE,KAAK+a,qBAsBH3D,EAAAvX,UAAA0Y,qBAAR,WACE,OAAQvY,KAAKqY,QACX,IAAK,UACHrY,KAAKwY,YAAY,UACjB,MACF,IAAK,YACHxY,KAAKwY,YAAY,YACjB,MACF,IAAK,UACHxY,KAAK2Y,WAWXhZ,OAAAM,eAAImX,EAAAvX,UAAA,WAAQ,KAAZ,WACE,IAAMob,EAAgB7W,EAA+BpE,KAAKqY,QAC1D,MAAO,CACL6C,iBAAkBlb,KAAKsX,aACvB6D,WAAYnb,KAAKiY,MAAM9I,OACvB9K,MAAO4W,EACP1J,SAAUvR,KAAKiS,UACfmJ,KAAMpb,KACNqX,IAAKrX,KAAKgY,uCAqBdZ,EAAAvX,UAAAwb,GAAA,SACE/L,EACAwH,EAGAlO,EACA0S,GANF,IAAAhc,EAAA,KAQQ2X,EAAW,IAAIJ,GAASC,EAAgBlO,EAAO0S,GAErD,OADAtb,KAAKub,aAAatE,GACX,WACL3X,EAAKkc,gBAAgBvE,KAUzBG,EAAAvX,UAAAiO,KAAA,SACE2N,EACAC,GAIA,OAAO1b,KAAK0Y,SAAS5K,KACnB2N,EACAC,IAOJtE,EAAAvX,UAAA8b,MAAA,SACED,GAEA,OAAO1b,KAAK8N,KAAK,KAAM4N,IAMjBtE,EAAAvX,UAAA0b,aAAR,SAAqBtE,GACnBjX,KAAKyX,WAAWhV,KAAKwU,GACrBjX,KAAK4b,gBAAgB3E,IAMfG,EAAAvX,UAAA2b,gBAAR,SAAwBvE,GACtB,IAAM5U,EAAIrC,KAAKyX,WAAW7U,QAAQqU,IACvB,IAAP5U,GACFrC,KAAKyX,WAAWoE,OAAOxZ,EAAG,IAItB+U,EAAAvX,UAAAkb,iBAAR,eAAAzb,EAAA,KACEU,KAAK8b,iBACa9b,KAAKyX,WAAWrP,QACxBqI,SAAQ,SAAAwG,GAChB3X,EAAKsc,gBAAgB3E,OAIjBG,EAAAvX,UAAAic,eAAR,WACE,QAAsBtW,IAAlBxF,KAAK8X,SAAwB,CAC/B,IAAIiE,GAAY,EAChB,OAAQ3X,EAA+BpE,KAAKqY,SAC1C,KAAKvU,EAAUG,QACbiT,GAASlX,KAAK8X,SAASkE,KAAK,KAAMhc,KAAKic,UAAvC/E,GACA,MACF,KAAKpT,EAAUI,SACf,KAAKJ,EAAUK,MAEb+S,GADelX,KAAK+X,QACJiE,KAAK,KAAMhc,KAAK0X,QAAhCR,GACA,MACF,QACE6E,GAAY,EAGZA,IACF/b,KAAK8X,cAAWtS,EAChBxF,KAAK+X,aAAUvS,KAKb4R,EAAAvX,UAAA+b,gBAAR,SAAwB3E,GAEtB,OADsB7S,EAA+BpE,KAAKqY,SAExD,KAAKvU,EAAUC,QACf,KAAKD,EAAUE,OACTiT,EAASD,MACXE,GAASD,EAASD,KAAKgF,KAAK/E,EAAUjX,KAAKic,UAA3C/E,GAEF,MACF,KAAKpT,EAAUG,QACTgT,EAASF,UACXG,GAASD,EAASF,SAASiF,KAAK/E,GAAhCC,GAEF,MACF,KAAKpT,EAAUI,SACf,KAAKJ,EAAUK,MAOf,QAEM8S,EAASrO,OACXsO,GACED,EAASrO,MAAMoT,KAAK/E,EAAUjX,KAAK0X,QADrCR,KAWRE,EAAAvX,UAAAqc,OAAA,WACE,IAAMC,EACY,WAAhBnc,KAAKqY,QACW,YAAhBrY,KAAKqY,OAIP,OAHI8D,GACFnc,KAAKwY,YAAY,WAEZ2D,GAOT/E,EAAAvX,UAAAuc,MAAA,WACE,IAAMD,EAAwB,YAAhBnc,KAAKqY,OAInB,OAHI8D,GACFnc,KAAKwY,YAAY,WAEZ2D,GAQT/E,EAAAvX,UAAAmJ,OAAA,WACE,IAAMmT,EACY,YAAhBnc,KAAKqY,QACW,YAAhBrY,KAAKqY,OAIP,OAHI8D,GACFnc,KAAKwY,YAAY,aAEZ2D,GAEX/E,CAAA,CA7jBA,GCNAiF,GAAA,WAGE,SAAAA,EAAoBC,EAA0B9U,GAA1B,KAAA8U,SAAAA,EAEhBtc,KAAK0Z,UADHlS,aAAoBZ,EACLY,EAEAZ,EAASW,YAAYC,GA2E5C,OAlEE6U,EAAAxc,UAAA+F,SAAA,WACE,MAAO,QAAU5F,KAAK0Z,UAAU7S,OAAS,IAAM7G,KAAK0Z,UAAU5S,MAGtDuV,EAAAxc,UAAA0c,QAAV,SAAkBhK,EAAyB/K,GACzC,OAAO,IAAI6U,EAAU9J,EAAS/K,IAMhC7H,OAAAM,eAAIoc,EAAAxc,UAAA,OAAI,KAAR,WACE,IAAM2H,EAAW,IAAIZ,EAAS5G,KAAK0Z,UAAU7S,OAAQ,IACrD,OAAO7G,KAAKuc,QAAQvc,KAAKsc,SAAU9U,oCAMrC7H,OAAAM,eAAIoc,EAAAxc,UAAA,SAAM,KAAV,WACE,OAAOG,KAAK0Z,UAAU7S,wCAMxBlH,OAAAM,eAAIoc,EAAAxc,UAAA,WAAQ,KAAZ,WACE,OAAOG,KAAK0Z,UAAU5S,sCAOxBnH,OAAAM,eAAIoc,EAAAxc,UAAA,OAAI,KAAR,WACE,OAAOsR,EAAcnR,KAAK0Z,UAAU5S,uCAMtCnH,OAAAM,eAAIoc,EAAAxc,UAAA,UAAO,KAAX,WACE,OAAOG,KAAKsc,0CAOd3c,OAAAM,eAAIoc,EAAAxc,UAAA,SAAM,KAAV,WACE,IAAM2c,WRjGa1V,GACrB,GAAoB,IAAhBA,EAAKxE,OACP,OAAO,KAET,IAAM8O,EAAQtK,EAAKuK,YAAY,KAC/B,OAAe,IAAXD,EACK,GAEOtK,EAAKsB,MAAM,EAAGgJ,EAEhC,CQuFoBqL,CAAOzc,KAAK0Z,UAAU5S,MACtC,GAAgB,OAAZ0V,EACF,OAAO,KAET,IAAMhV,EAAW,IAAIZ,EAAS5G,KAAK0Z,UAAU7S,OAAQ2V,GACrD,OAAO,IAAIH,EAAUrc,KAAKsc,SAAU9U,oCAMtC6U,EAAAxc,UAAA6c,aAAA,SAAajc,GACX,GAA4B,KAAxBT,KAAK0Z,UAAU5S,KACjB,MAAMtG,EAAqBC,IAGjC4b,CAAA,CAlFA,YAsLgBM,GAAQtF,GACtB,IAAMuF,EAA0B,CAC9BtJ,SAAU,GACVC,MAAO,IAET,OAAOsJ,GAAcxF,EAAKuF,GAAa9O,MAAK,WAAM,OAAA8O,CAAW,GAC/D,CAQA,SAAeC,GACbxF,EACAuF,EACAtH,mHAMiB,SAAMwH,GAAKzF,EAJH,CAEvB/B,UAASA,mBAELyH,EAAWlJ,EAAAmJ,QACjBvJ,EAAAmJ,EAAYtJ,UAAS7Q,KAAIoK,MAAA4G,EAAIsJ,EAASzJ,WACtCM,EAAAgJ,EAAYrJ,OAAM9Q,KAAIoK,MAAA+G,EAAImJ,EAASxJ,OACL,MAA1BwJ,EAASvJ,cAAT,MACF,GAAMqJ,GAAcxF,EAAKuF,EAAaG,EAASvJ,uBAA/CK,EAAAmJ,kDA0BkBF,GACpBzF,EACA4F,mHAYkB,OAVH,MAAXA,GACgC,kBAAvBA,EAAQ1H,YACjB/L,EACE,qBACgB,EACA,IAChByT,EAAQ1H,YAII,GAAM8B,EAAIgC,QAAQC,wBASpC,OATMC,EAAY9F,EAAAuJ,OACZE,EAAKD,GAAW,CAAC,EACjB9H,EAAcC,GAClBiC,EAAIgC,QACJhC,EAAIqC,UACY,IAChBwD,EAAG5H,UACH4H,EAAG3H,YAEE,CAAP,EAAO8B,EAAIgC,QAAQO,aAAazE,EAAaoE,GAAWxQ,8BAgCpCoU,GACpB9F,EACA9F,iHAGkB,OADlB8F,EAAIqF,aAAa,kBACC,GAAMrF,EAAIgC,QAAQC,wBAOpC,OAPMC,EAAY9F,EAAAuJ,OACZ7H,WJxIN5C,EACA/K,EACA+J,EACAQ,GAEA,IACM5M,EAAMyE,EADIpC,EAASR,iBAGnB3B,EAAO2N,EAAiBzB,EAAUQ,GAElCzH,EAAUiI,EAAQ2C,sBAClBC,EAAc,IAAInB,GACtB7O,EALa,QAObkP,GAAgB9B,EAASR,GACzBzH,GAKF,OAHA6K,EAAY7P,QARI,CAAE,eAAgB,mCASlC6P,EAAY9P,KAAOA,EACnB8P,EAAYjB,aAAea,GAAmBvN,GACvC2N,CACT,CImHsBiI,CAClB/F,EAAIgC,QACJhC,EAAIqC,UACJnI,EACAO,KAEK,CAAP,EAAOuF,EAAIgC,QAAQO,aAAazE,EAAaoE,GAAWxQ,8BASpCsU,GAAehG,iHAEjB,OADlBA,EAAIqF,aAAa,kBACC,GAAMrF,EAAIgC,QAAQC,wBAMpC,OANMC,EAAY9F,EAAAuJ,OACZ7H,WJ7KN5C,EACA/K,EACAuK,GAEA,IACM5M,EAAMyE,EADIpC,EAASR,iBAGnBsD,EAAUiI,EAAQ2C,sBAClBC,EAAc,IAAInB,GACtB7O,EAHa,MAKboP,GAAmBhC,EAASR,GAC5BzH,GAGF,OADA6K,EAAYjB,aAAea,GAAmBvN,GACvC2N,CACT,CI6JsBmI,CAClBjG,EAAIgC,QACJhC,EAAIqC,UACJ5H,KAEK,CAAP,EAAOuF,EAAIgC,QACRO,aAAazE,EAAaoE,GAC1BxQ,aACA+E,MAAK,SAAA3I,GACJ,GAAY,OAARA,EACF,MvBzIC,IAAIjG,EAAqB,kBAE9B,mDuByIE,OAAOiG,sBAUSoY,GAAalG,iHAEf,OADlBA,EAAIqF,aAAa,gBACC,GAAMrF,EAAIgC,QAAQC,wBAEpC,OAFMC,EAAY9F,EAAAuJ,OACZ7H,WJ3JN5C,EACA/K,GAEA,IACMrC,EAAMyE,EADIpC,EAASR,iBAGnBsD,EAAUiI,EAAQ2C,sBAGlBC,EAAc,IAAInB,GAAY7O,EAJrB,UAGf,SAAiBqY,EAAaC,GAAa,GACenT,GAG1D,OAFA6K,EAAYjL,aAAe,CAAC,IAAK,KACjCiL,EAAYjB,aAAea,GAAmBvN,GACvC2N,CACT,CI8IsBuI,CAAqBrG,EAAIgC,QAAShC,EAAIqC,WACnD,CAAP,EAAOrC,EAAIgC,QAAQO,aAAazE,EAAaoE,GAAWxQ,8BAa1C4U,GAAUtG,EAAgBuG,GACxC,IAAMpB,WRrXc1V,EAAc8W,GAClC,IAAMC,EAAqBD,EACxBnJ,MAAM,KACNqJ,QAAO,SAAAC,GAAa,OAAAA,EAAUzb,OAAS,CAAC,IACxC0b,KAAK,KACR,OAAoB,IAAhBlX,EAAKxE,OACAub,EAEA/W,EAAO,IAAM+W,CAExB,CQ2WkBI,CAAM5G,EAAIqC,UAAU5S,KAAM8W,GACpCpW,EAAW,IAAIZ,EAASyQ,EAAIqC,UAAU7S,OAAQ2V,GACpD,OAAO,IAAIH,GAAUhF,EAAIgC,QAAS7R,EACpC,UCjXgB0W,GAAMpX,GACpB,MAAO,kBAAkBqX,KAAKrX,EAChC,CAaA,SAASsX,GACP/G,EACAvQ,GAEA,GAAIuQ,aAAegH,GAAgB,CACjC,IAAM9L,EAAU8E,EAChB,GAAuB,MAAnB9E,EAAQ+L,QACV,MxByJG,IAAIpf,EAAqB,oBAE9B,6CAEED,EACA,yCwB5JF,IAAM0U,EAAY,IAAI0I,GAAU9J,EAASA,EAAQ+L,SACjD,OAAY,MAARxX,EACKsX,GAAYzK,EAAW7M,GAEvB6M,EAIT,QAAanO,IAATsB,EAAoB,CACtB,GAAIA,EAAKyX,SAAS,MAChB,MAAMje,EAAgB,oCAExB,OAAOqd,GAAUtG,EAAKvQ,GAEtB,OAAOuQ,CAGb,UAqBgBA,GACdmH,EACAC,GAEA,GAAIA,GAAaP,GAAMO,GAAY,CACjC,GAAID,aAAwBH,GAC1B,OA5DG,IAAIhC,GA4DWmC,EAAcC,GAEhC,MAAMne,EACJ,4EAIJ,OAAO8d,GAAYI,EAAcC,EAErC,CAeA,IAAAJ,GAAA,WAQE,SAAAA,EAIWK,EACAC,EACAC,EACAC,EACAC,GAJA,KAAAJ,IAAAA,EACA,KAAAC,cAAAA,EACA,KAAAC,MAAAA,EACA,KAAAC,KAAAA,EACA,KAAAC,iBAAAA,EAfF,KAAAR,QAA2B,KACjB,KAAAS,OAAwB,KAEnC,KAAAC,UAAoB,EAc1Bhf,KAAKif,uBzBtHuC,KyBuH5Cjf,KAAKkf,oBzBhHoC,IyBiHzClf,KAAKmf,UAAY,IAAIC,IAEnBpf,KAAKse,QADK,MAARO,EACajY,EAASQ,mBAAmByX,GAnCjD,SAAuBQ,GACrB,IAAMhY,EAAqB,OAANgY,QAAM,IAANA,OAAM,EAANA,EAASpgB,GAC9B,OAAoB,MAAhBoI,EACK,KAEFT,EAASQ,mBAAmBC,EACrC,CA+BqBiY,CAActf,KAAK0e,IAAIzB,SA+F5C,OAxFEtd,OAAAM,eAAIoe,EAAAxe,UAAA,qBAAkB,KAAtB,WACE,OAAOG,KAAKkf,yBAGd,SAAuBK,GACrB/V,EACE,OACe,EACC6I,OAAOmN,kBACvBD,GAEFvf,KAAKkf,oBAAsBK,mCAO7B5f,OAAAM,eAAIoe,EAAAxe,UAAA,wBAAqB,KAAzB,WACE,OAAOG,KAAKif,4BAGd,SAA0BM,GACxB/V,EACE,OACe,EACC6I,OAAOmN,kBACvBD,GAEFvf,KAAKif,uBAAyBM,mCAG1BlB,EAAAxe,UAAAyZ,cAAN,gIACQmG,EAAOzf,KAAK2e,cAAce,aAAa,CAAEC,UAAU,KAErC,GAAMF,EAAKG,YAD3B,aAEF,GAAkB,QADZC,EAAYpM,EAAAuJ,QAEhB,MAAO,CAAP,EAAO6C,EAAUC,8BAGrB,MAAO,CAAP,EAAO,cAMTzB,EAAAxe,UAAAkgB,QAAA,WAIE,OAHA/f,KAAKgf,UAAW,EAChBhf,KAAKmf,UAAU1O,SAAQ,SAAAuP,GAAW,OAAAA,EAAQhX,QAAQ,IAClDhJ,KAAKmf,UAAUc,QACRpb,QAAQC,WAOjBuZ,EAAAxe,UAAA+S,sBAAA,SAAsB/K,GACpB,OAAO,IAAIwU,GAAUrc,KAAM6H,IAO7BwW,EAAAxe,UAAA+Z,aAAA,SACEzE,EACAoE,GAFF,IAAAja,EAAA,KAIE,GAAKU,KAAKgf,SAgBR,OAAO,IAAIrW,EAAYpI,KAfvB,IAAM2f,Wd+CV/K,EACAgL,EACA5G,EACA/O,EACA4V,GAEA,IAAMpW,EAAYF,EAAgBqL,EAAYlB,WACxC9O,EAAMgQ,EAAYhQ,IAAM6E,EACxB1E,EAAU3F,OAAOiW,OAAO,CAAC,EAAGT,EAAY7P,SAI9C,gBAnB8BA,EAAkB6a,GAC5CA,IACF7a,EAAQ,oBAAsB6a,EAElC,CAYEE,CAAgB/a,EAAS6a,YAhCzB7a,EACAiU,GAEkB,OAAdA,GAAsBA,EAAUjX,OAAS,IAC3CgD,EAAuB,cAAI,YAAciU,EAE7C,CA2BE+G,CAAehb,EAASiU,YAxBxBjU,EACA8a,GAEA9a,EAAQ,8BACN,UAA2B,OAAf8a,QAAe,IAAfA,EAAAA,EAAmB,aACnC,CAoBEG,CAAkBjb,EAAS8a,GACpB,IAAInW,EACT9E,EACAgQ,EAAY/P,OACZE,EACA6P,EAAY9P,KACZ8P,EAAYjL,aACZiL,EAAYhL,qBACZgL,EAAYlI,QACZkI,EAAYjB,aACZiB,EAAY7K,QACZ6K,EAAY5K,iBACZC,EAEJ,CcxEsBgW,CACdrL,EACAnV,KAAK+e,OACLxF,EACAvZ,KAAK4e,MACL5e,KAAK8e,kBAQP,OANA9e,KAAKmf,UAAUsB,IAAIP,GAEnBA,EAAQnX,aAAa+E,MACnB,WAAM,OAAAxO,EAAK6f,UAAUuB,OAAOR,EAAQ,IACpC,WAAM,OAAA5gB,EAAK6f,UAAUuB,OAAOR,EAAQ,IAE/BA,GAKb7B,CAAA,CAvHA,YCXgBsC,GACdtJ,EACAlW,EACAoQ,GAGA,gBFuDA8F,EACAlW,EACAoQ,GAGA,OADA8F,EAAIqF,aAAa,wBACV,IAAItF,GAAWC,EAAK,IAAIpI,EAAQ9N,GAAOoQ,EAChD,CE7DSqP,CADPvJ,GAAMwJ,EAAAA,EAAAA,IAAmBxJ,GAGvBlW,EACAoQ,EAEJ,UASgBuP,GAAYzJ,GAE1B,gBFiLgCA,iHAEd,OADlBA,EAAIqF,aAAa,eACC,GAAMrF,EAAIgC,QAAQC,wBAMpC,OANMC,EAAY9F,EAAAuJ,OACZ7H,EAAcF,GAClBoC,EAAIgC,QACJhC,EAAIqC,UACJ5H,KAEK,CAAP,EAAOuF,EAAIgC,QAAQO,aAAazE,EAAaoE,GAAWxQ,qBEzLjDgY,CADP1J,GAAMwJ,EAAAA,EAAAA,IAAmBxJ,GAE3B,UAqHgB2J,GACdxC,EACAC,GAGA,OAAOpH,GADPmH,GAAeqC,EAAAA,EAAAA,IAAmBrC,GAGhCC,EAEJ,CC1PA,IAAAwC,GAAA,WAEE,SAAAA,EACWC,EACA9F,EACA/D,GAFA,KAAA6J,UAAAA,EACA,KAAA9F,KAAAA,EACA,KAAA/D,IAAAA,EAeb,OAZE1X,OAAAM,eAAIghB,EAAAphB,UAAA,mBAAgB,KAApB,WACE,OAAOG,KAAKkhB,UAAUhG,kDAExBvb,OAAAM,eAAIghB,EAAAphB,UAAA,WAAQ,KAAZ,WACE,OAAOG,KAAKkhB,UAAU3P,0CAExB5R,OAAAM,eAAIghB,EAAAphB,UAAA,QAAK,KAAT,WACE,OAAOG,KAAKkhB,UAAU7c,uCAExB1E,OAAAM,eAAIghB,EAAAphB,UAAA,aAAU,KAAd,WACE,OAAOG,KAAKkhB,UAAU/F,4CAE1B8F,CAAA,CApBA,GCMAE,GAAA,WACE,SAAAA,EACWD,EACQlJ,GADR,KAAAkJ,UAAAA,EACQ,KAAAlJ,KAAAA,EAWnB,KAAAhP,OAAShJ,KAAKkhB,UAAUlY,OAAOgT,KAAKhc,KAAKkhB,WACzC,KAAAvF,MAAQ3b,KAAKkhB,UAAUvF,MAAMK,KAAKhc,KAAKkhB,WACvC,KAAA9E,MAAQpc,KAAKkhB,UAAU9E,MAAMJ,KAAKhc,KAAKkhB,WACvC,KAAAhF,OAASlc,KAAKkhB,UAAUhF,OAAOF,KAAKhc,KAAKkhB,WAsD3C,OAjEEvhB,OAAAM,eAAIkhB,EAAAthB,UAAA,WAAQ,KAAZ,WACE,OAAO,IAAIohB,GACTjhB,KAAKkhB,UAAUjF,SACfjc,KACAA,KAAKgY,uCASTmJ,EAAAthB,UAAAiO,KAAA,SACE2N,EACAC,GAFF,IAAApc,EAAA,KAIE,OAAOU,KAAKkhB,UAAUpT,MAAK,SAAAmO,GACzB,GAAIR,EACF,OAAOA,EACL,IAAIwF,GAAyBhF,EAAU3c,EAAMA,EAAK0Y,SAGrD0D,IAGLyF,EAAAthB,UAAAwb,GAAA,SACE/L,EACAwH,EAIAlO,EACA0S,GAPF,IAAAhc,EAAA,KASM8hB,OAGuC5b,EAoB3C,OAnBMsR,IAEFsK,EAD4B,oBAAnBtK,EACe,SAACuK,GACvB,OAAAvK,EACE,IAAImK,GAAyBI,EAAc/hB,EAAMA,EAAK0Y,QAGlC,CACtBhB,KAAQF,EAAeE,KACnB,SAACqK,GACC,OAAAvK,EAAeE,KACb,IAAIiK,GAAyBI,EAAc/hB,EAAMA,EAAK0Y,aAE1DxS,EACJuR,SAAUD,EAAeC,eAAYvR,EACrCoD,MAAOkO,EAAelO,YAASpD,IAI9BxF,KAAKkhB,UAAU7F,GACpB/L,EACA8R,EACAxY,QAASpD,EACT8V,QAAa9V,IAGnB2b,CAAA,CAvEA,GCPAG,GAAA,WACE,SAAAA,EACWJ,EACQ5E,GADR,KAAA4E,UAAAA,EACQ,KAAA5E,SAAAA,EAgBrB,OAbE3c,OAAAM,eAAIqhB,EAAAzhB,UAAA,WAAQ,KAAZ,eAAAP,EAAA,KACE,OAAOU,KAAKkhB,UAAU5N,SAASjD,KAC7B,SAAAgH,GAAO,WAAIkK,GAAgBlK,EAAK/X,EAAKgd,SAAS,qCAGlD3c,OAAAM,eAAIqhB,EAAAzhB,UAAA,QAAK,KAAT,eAAAP,EAAA,KACE,OAAOU,KAAKkhB,UAAU3N,MAAMlD,KAC1B,SAAAgH,GAAO,WAAIkK,GAAgBlK,EAAK/X,EAAKgd,SAAS,qCAGlD3c,OAAAM,eAAIqhB,EAAAzhB,UAAA,gBAAa,KAAjB,WACE,OAAOG,KAAKkhB,UAAU1N,eAAiB,sCAE3C8N,CAAA,CAnBA,GCsBAC,GAAA,WAEE,SAAAA,EACWL,EACF7H,GADE,KAAA6H,UAAAA,EACF,KAAA7H,QAAAA,EA2LX,OAxLE1Z,OAAAM,eAAIshB,EAAA1hB,UAAA,OAAI,KAAR,WACE,OAAOG,KAAKkhB,UAAUzgB,sCAGxBd,OAAAM,eAAIshB,EAAA1hB,UAAA,SAAM,KAAV,WACE,OAAOG,KAAKkhB,UAAUra,wCAGxBlH,OAAAM,eAAIshB,EAAA1hB,UAAA,WAAQ,KAAZ,WACE,OAAOG,KAAKkhB,UAAUhP,0CAGxBqP,EAAA1hB,UAAA+F,SAAA,WACE,OAAO5F,KAAKkhB,UAAUtb,YAQxB2b,EAAA1hB,UAAAoe,MAAA,SAAML,GACJ,IAAMjK,WJ6MgB0D,EAAuBuG,GAC/C,OAAOD,GAAkBtG,EAAkBuG,EAC7C,CI/MsB4D,CAAUxhB,KAAKkhB,UAAWtD,GAC5C,OAAO,IAAI2D,EAAgB5N,EAAW3T,KAAKqZ,UAG7C1Z,OAAAM,eAAIshB,EAAA1hB,UAAA,OAAI,KAAR,WACE,OAAO,IAAI0hB,EAAgBvhB,KAAKkhB,UAAUO,KAAMzhB,KAAKqZ,0CAOvD1Z,OAAAM,eAAIshB,EAAA1hB,UAAA,SAAM,KAAV,WACE,IAAM8T,EAAY3T,KAAKkhB,UAAUzE,OACjC,OAAiB,MAAb9I,EACK,KAEF,IAAI4N,EAAgB5N,EAAW3T,KAAKqZ,0CAS7CkI,EAAA1hB,UAAA6hB,IAAA,SACEvgB,EACAoQ,GAGA,OADAvR,KAAK0c,aAAa,OACX,IAAIyE,GACTR,GAAqB3gB,KAAKkhB,UAAW/f,EAAMoQ,GAC3CvR,OAWJuhB,EAAA1hB,UAAA8hB,UAAA,SACE7f,EACAnB,EACA4Q,QADA,IAAA5Q,IAAAA,EAAuBE,EAAaC,KAGpCd,KAAK0c,aAAa,aAClB,IAAMvb,EAAOE,EAAeV,EAAQmB,GAC9B6T,GAAgBiM,EAAAA,EAAAA,IAAA,GAAKrQ,GAI3B,OAHoC,MAAhCoE,EAA2B,aAAiC,MAApBxU,EAAKC,cAC/CuU,EAA2B,YAAIxU,EAAKC,aAE/B,IAAI+f,GACT,IAAI/J,GACFpX,KAAKkhB,UACL,IAAIjS,EAAS9N,EAAKA,MAAM,GACxBwU,GAEF3V,OAqBJuhB,EAAA1hB,UAAA8c,QAAA,eAAArd,EAAA,KACE,gBJ8DoB+X,GAEtB,OAAOsF,GADPtF,GAAMwJ,EAAAA,EAAAA,IAAmBxJ,GAE3B,CIjEWwK,CAAQ7hB,KAAKkhB,WAAWpT,MAC7B,SAAAgU,GAAK,WAAIR,GAAiBQ,EAAGxiB,EAAK+Z,QAAQ,KAuB9CkI,EAAA1hB,UAAAuV,KAAA,SAAK6H,GAAL,IAAA3d,EAAA,KACE,gBJWF+X,EACA4F,GAGA,OAAOH,GADPzF,GAAMwJ,EAAAA,EAAAA,IAAmBxJ,GACa4F,EACxC,CIhBW8E,CAAK/hB,KAAKkhB,UAAWjE,QAAWzX,GAAWsI,MAChD,SAAAgU,GAAK,WAAIR,GAAiBQ,EAAGxiB,EAAK+Z,QAAQ,KAS9CkI,EAAA1hB,UAAAoV,YAAA,WACE,OAAO6L,GAAY9gB,KAAKkhB,YAY1BK,EAAA1hB,UAAAud,eAAA,SACE7L,GAEA,gBJhDF8F,EACA9F,GAGA,OAAO4L,GADP9F,GAAMwJ,EAAAA,EAAAA,IAAmBxJ,GAGvB9F,EAEJ,CIwCWyQ,CACLhiB,KAAKkhB,UACL3P,IAQJgQ,EAAA1hB,UAAAwd,eAAA,WACE,gBJW2BhG,GAE7B,OAAOgG,GADPhG,GAAMwJ,EAAAA,EAAAA,IAAmBxJ,GAE3B,CIdW4K,CAAejiB,KAAKkhB,YAO7BK,EAAA1hB,UAAA6gB,OAAA,WAEE,OADA1gB,KAAK0c,aAAa,mBJcOrF,GAE3B,OAAOkG,GADPlG,GAAMwJ,EAAAA,EAAAA,IAAmBxJ,GAE3B,CIhBW6K,CAAaliB,KAAKkhB,YAGnBK,EAAA1hB,UAAA6c,aAAR,SAAqBjc,GACnB,GAAsD,KAAjDT,KAAKkhB,UAAyBxH,UAAU5S,KAC3C,MAAMtG,EAAqBC,IAGjC8gB,CAAA,CA/LA,GCdAY,GAAA,WAEE,SAAAA,EAAmBzD,EAA2BwC,GAA9C,IAAA5hB,EAAA,KAAmB,KAAAof,IAAAA,EAA2B,KAAAwC,UAAAA,EAE9C,KAAAkB,SAAW,CAIT1B,OAAQ,WACN,OAAOphB,EAAK4hB,UAAUnB,YAoD5B,OAhDEpgB,OAAAM,eAAIkiB,EAAAtiB,UAAA,wBAAqB,KAAzB,WACE,OAAOG,KAAKkhB,UAAUhM,uDAGxBvV,OAAAM,eAAIkiB,EAAAtiB,UAAA,qBAAkB,KAAtB,WACE,OAAOG,KAAKkhB,UAAUxK,oDAOxByL,EAAAtiB,UAAAwX,IAAA,SAAIvQ,GACF,GAAIoX,GAAMpX,GACR,MAAMxG,EACJ,sEAGJ,OAAO,IAAIihB,GAAgBP,GAAIhhB,KAAKkhB,UAAWpa,GAAO9G,OAOxDmiB,EAAAtiB,UAAAwiB,WAAA,SAAWld,GACT,IAAK+Y,GAAM/Y,GACT,MAAM7E,EACJ,6EAGJ,IACEsG,EAAUW,YAAYpC,GACtB,MAAOlD,GACP,MAAM3B,EACJ,kEAGJ,OAAO,IAAIihB,GAAgBP,GAAIhhB,KAAKkhB,UAAW/b,GAAMnF,OAGvDmiB,EAAAtiB,UAAAyiB,sBAAA,SAAsB/C,GACpBvf,KAAKkhB,UAAUxK,mBAAqB6I,GAGtC4C,EAAAtiB,UAAA0iB,yBAAA,SAAyBhD,GACvBvf,KAAKkhB,UAAUhM,sBAAwBqK,GAE3C4C,CAAA,CA7DA,GCaA,SAASK,GACPC,EACAhP,OAAsBtO,EAAGsO,EAAAiP,mBAInBhE,EAAM+D,EAAUE,YAAY,OAAOjD,eACnCkD,EAAeH,EAAUE,YAAY,iBAc3C,OAVmD,IAAIR,GACrDzD,EACA,IAAIL,GACFK,EACAkE,EACA,IAAIlc,EACJvB,EACA0d,EAAAA,EAAAA,aAIN,WAEgCC,GAC9B,IAAMC,EAAmB,CAEvBjf,UAASA,EACTF,UAASA,EACT/C,aAAYA,EACZmiB,QAAS3E,GACThC,UAAWkF,IAEbuB,EAASV,SAASa,kBAChB,IAAIC,EAAAA,GApCa,UAoCWV,GAAS,UAClCW,gBAAgBJ,GAChBK,sBAAqB,IAG1BN,EAASO,4CACX,CAEAC,CAAgBT,EAAAA","sources":["../node_modules/@firebase/storage/src/implementation/constants.ts","../node_modules/@firebase/storage/src/implementation/error.ts","../node_modules/@firebase/storage/src/implementation/string.ts","../node_modules/@firebase/storage/src/implementation/taskenums.ts","../node_modules/@firebase/storage/src/implementation/xhrio.ts","../node_modules/@firebase/storage/src/implementation/xhrio_network.ts","../node_modules/@firebase/storage/src/implementation/xhriopool.ts","../node_modules/@firebase/storage/src/implementation/location.ts","../node_modules/@firebase/storage/src/implementation/failrequest.ts","../node_modules/@firebase/storage/src/implementation/type.ts","../node_modules/@firebase/storage/src/implementation/url.ts","../node_modules/@firebase/storage/src/implementation/request.ts","../node_modules/@firebase/storage/src/implementation/backoff.ts","../node_modules/@firebase/storage/src/implementation/fs.ts","../node_modules/@firebase/storage/src/implementation/blob.ts","../node_modules/@firebase/storage/src/implementation/json.ts","../node_modules/@firebase/storage/src/implementation/path.ts","../node_modules/@firebase/storage/src/implementation/metadata.ts","../node_modules/@firebase/storage/src/implementation/list.ts","../node_modules/@firebase/storage/src/implementation/requestinfo.ts","../node_modules/@firebase/storage/src/implementation/requests.ts","../node_modules/@firebase/storage/src/implementation/observer.ts","../node_modules/@firebase/storage/src/implementation/async.ts","../node_modules/@firebase/storage/src/task.ts","../node_modules/@firebase/storage/src/reference.ts","../node_modules/@firebase/storage/src/service.ts","../node_modules/@firebase/storage/exp/api.ts","../node_modules/@firebase/storage/compat/tasksnapshot.ts","../node_modules/@firebase/storage/compat/task.ts","../node_modules/@firebase/storage/compat/list.ts","../node_modules/@firebase/storage/compat/reference.ts","../node_modules/@firebase/storage/compat/service.ts","../node_modules/@firebase/storage/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","import { FirebaseError } from '@firebase/util';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class FirebaseStorageError extends FirebaseError {\n  /**\n   * Stores custom error data unque to FirebaseStorageError.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   */\n  constructor(code: StorageErrorCode, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    // Without this, `instanceof FirebaseStorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, FirebaseStorageError.prototype);\n  }\n\n  /**\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Error message including serverResponse if available.\n   */\n  get message(): string {\n    if (this.customData.serverResponse) {\n      return `${this.message}\\n${this.customData.serverResponse}`;\n    } else {\n      return this.message;\n    }\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `FirebaseStorageError`s.\n */\nexport const enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): FirebaseStorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new FirebaseStorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): FirebaseStorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new FirebaseStorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorized(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function invalidArgument(message: string): FirebaseStorageError {\n  return new FirebaseStorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): FirebaseStorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n */\nexport function invalidRootOperation(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(\n  format: string,\n  message: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n    message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = string;\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n};\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = atob(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n */\nexport type TaskState = string;\n\n/**\n * Represents the current state of a running upload.\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * XHR headers\n */\nexport interface Headers {\n  [name: string]: string | number;\n}\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n */\nexport interface XhrIo {\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<XhrIo>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponseText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Headers, XhrIo, ErrorCode } from './xhrio';\nimport { internalError } from './error';\n\n/**\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\n * doesn't work in React Native on Android.\n */\nexport class NetworkXhrIo implements XhrIo {\n  private xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<XhrIo>;\n  private sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve(this);\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<XhrIo> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  /**\n   * @override\n   */\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  /**\n   * @override\n   */\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  getResponseText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  }\n\n  /**\n   * Aborts the request.\n   * @override\n   */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  /**\n   * @override\n   */\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  /**\n   * @override\n   */\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  /**\n   * @override\n   */\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Replacement for goog.net.XhrIoPool that works with fbs.XhrIo.\n */\nimport { XhrIo } from './xhrio';\nimport { NetworkXhrIo } from './xhrio_network';\n\n/**\n * Factory-like class for creating XhrIo instances.\n */\nexport class XhrIoPool {\n  createXhrIo(): XhrIo {\n    return new NetworkXhrIo();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = DEFAULT_HOST.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      '(?:storage.googleapis.com|storage.cloud.google.com)';\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: FirebaseStorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { DEFAULT_HOST } from './constants';\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(urlPart: string): string {\n  return `https://${DEFAULT_HOST}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { start, stop, id as backoffId } from './backoff';\nimport {\n  FirebaseStorageError,\n  unknown,\n  appDeleted,\n  canceled,\n  retryLimitExceeded\n} from './error';\nimport { RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Headers, XhrIo, ErrorCode } from './xhrio';\nimport { XhrIoPool } from './xhriopool';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\nclass NetworkRequest<T> implements Request<T> {\n  private url_: string;\n  private method_: string;\n  private headers_: Headers;\n  private body_: string | Blob | Uint8Array | null;\n  private successCodes_: number[];\n  private additionalRetryCodes_: number[];\n  private pendingXhr_: XhrIo | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: T | PromiseLike<T>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private callback_: (p1: XhrIo, p2: string) => T;\n  private errorCallback_:\n    | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null;\n  private progressCallback_: ((p1: number, p2: number) => void) | null;\n  private timeout_: number;\n  private pool_: XhrIoPool;\n  promise_: Promise<T>;\n\n  constructor(\n    url: string,\n    method: string,\n    headers: Headers,\n    body: string | Blob | Uint8Array | null,\n    successCodes: number[],\n    additionalRetryCodes: number[],\n    callback: (p1: XhrIo, p2: string) => T,\n    errorCallback:\n      | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n      | null,\n    timeout: number,\n    progressCallback: ((p1: number, p2: number) => void) | null,\n    pool: XhrIoPool\n  ) {\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: T | PromiseLike<T>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const self = this;\n\n    function doTheRequest(\n      backoffCallback: (p1: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ): void {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const xhr = self.pool_.createXhrIo();\n      self.pendingXhr_ = xhr;\n\n      function progressListener(progressEvent: ProgressEvent): void {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n      if (self.progressCallback_ !== null) {\n        xhr.addUploadProgressListener(progressListener);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      xhr\n        .send(self.url_, self.method_, self.body_, self.headers_)\n        .then((xhr: XhrIo) => {\n          if (self.progressCallback_ !== null) {\n            xhr.removeUploadProgressListener(progressListener);\n          }\n          self.pendingXhr_ = null;\n          xhr = xhr as XhrIo;\n          const hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = xhr.getStatus();\n          if (!hitServer || self.isRetryStatusCode_(status)) {\n            const wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = self.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, xhr));\n        });\n    }\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    function backoffDone(\n      requestWentThrough: boolean,\n      status: RequestEndStatus\n    ): void {\n      const resolve = self.resolve_;\n      const reject = self.reject_;\n      const xhr = status.xhr as XhrIo;\n      if (status.wasSuccessCode) {\n        try {\n          const result = self.callback_(xhr, xhr.getResponseText());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (xhr !== null) {\n          const err = unknown();\n          err.serverResponse = xhr.getResponseText();\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(xhr, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingXhr_ !== null) {\n      this.pendingXhr_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public xhr: XhrIo | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function makeRequest<T>(\n  requestInfo: RequestInfo<T>,\n  appId: string | null,\n  authToken: string | null,\n  pool: XhrIoPool,\n  firebaseVersion?: string\n): Request<T> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  return new NetworkRequest<T>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    pool\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let timeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      return;\n    }\n    if (success) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    if (triggeredCallback) {\n      return;\n    }\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, FirebaseStorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new FirebaseStorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { StorageService } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: StorageService): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: StorageService,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: StorageService,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { StorageService } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: StorageService,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: StorageService,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = (obj as unknown) as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Headers, XhrIo } from './xhrio';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\nexport class RequestInfo<T> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n\n  errorHandler:\n    | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: (p1: XhrIo, p2: string) => T,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  FirebaseStorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { XhrIo } from './xhrio';\nimport { StorageService } from '../service';\n\n/**\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: StorageService,\n  mappings: Mappings\n): (p1: XhrIo, p2: string) => Metadata {\n  function handler(xhr: XhrIo, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: StorageService,\n  bucket: string\n): (p1: XhrIo, p2: string) => ListResult {\n  function handler(xhr: XhrIo, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: StorageService,\n  mappings: Mappings\n): (p1: XhrIo, p2: string) => string | null {\n  function handler(xhr: XhrIo, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata as Metadata, text);\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError {\n  function errorHandler(\n    xhr: XhrIo,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      newErr = unauthenticated();\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: XhrIo,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: StorageService,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: StorageService,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: StorageService,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: StorageService,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: StorageService,\n  location: Location\n): RequestInfo<void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: XhrIo, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: StorageService,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(xhr: XhrIo, allowed?: string[]): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: StorageService,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': blob.size(),\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: XhrIo): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: StorageService,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: XhrIo): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: StorageService,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': status_.current\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr: XhrIo, text: string): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { FirebaseStorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: FirebaseStorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `FirebaseStorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `FirebaseStorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error;\n      this.complete = complete;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  FirebaseStorageError\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  CompleteFn,\n  ErrorFn,\n  Observer,\n  StorageObserver,\n  Subscribe,\n  Unsubscribe\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot } from './tasksnapshot';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserver<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: FirebaseStorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: FirebaseStorageError) => void;\n  private _metadataErrorHandler: (p1: FirebaseStorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: FirebaseStorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(callback: (p1: string | null) => void): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._ref.storage._getAuthToken().then(authToken => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken(authToken => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken(authToken => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `FirebaseStorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | ((a: UploadTaskSnapshot) => unknown),\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(nextOrObserver, error, completed);\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: FirebaseStorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(\n    onRejected: (p1: FirebaseStorageError) => T | Promise<T>\n  ): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: FirebaseStorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as FirebaseStorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, parent, lastComponent } from './implementation/path';\nimport {\n  list as requestsList,\n  getMetadata as requestsGetMetadata,\n  updateMetadata as requestsUpdateMetadata,\n  getDownloadUrl as requestsGetDownloadUrl,\n  deleteObject as requestsDeleteObject,\n  multipartUpload\n} from './implementation/requests';\nimport { ListOptions } from '../exp/public-types';\nimport { StringFormat, dataFromString } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { StorageService } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { UploadResult } from './tasksnapshot';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(private _service: StorageService, location: string | Location) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(service: StorageService, location: Location): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): StorageService {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  return ref.storage\n    ._getAuthToken()\n    .then(authToken => {\n      const requestInfo = multipartUpload(\n        ref.storage,\n        ref._location,\n        getMappings(),\n        new FbsBlob(data, true),\n        metadata\n      );\n      const multipartRequest = ref.storage._makeRequest(requestInfo, authToken);\n      return multipartRequest.getPromise();\n    })\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport async function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const authToken = await ref.storage._getAuthToken();\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage._makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * A promise that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport async function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const authToken = await ref.storage._getAuthToken();\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage._makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A promise that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport async function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const authToken = await ref.storage._getAuthToken();\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage._makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A promise that resolves with the download\n *     URL for this object.\n */\nexport async function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const authToken = await ref.storage._getAuthToken();\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    ._makeRequest(requestInfo, authToken)\n    .getPromise()\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A promise that resolves if the deletion succeeds.\n */\nexport async function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const authToken = await ref.storage._getAuthToken();\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage._makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { XhrIoPool } from './implementation/xhriopool';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  _FirebaseService\n  // eslint-disable-next-line import/no-extraneous-dependencies\n} from '@firebase/app-exp';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from '../src/implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: StorageService, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: StorageService | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof StorageService) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      if (path.includes('..')) {\n        throw invalidArgument('`path` param cannot contain \"..\"');\n      }\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: StorageService, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: StorageService | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: StorageService | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof StorageService) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(config?: FirebaseOptions): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString);\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @public\n * @param opt_url - gs:// url to a custom Storage Bucket\n */\nexport class StorageService implements _FirebaseService {\n  readonly _bucket: Location | null = null;\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    readonly _pool: XhrIoPool,\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url);\n    } else {\n      this._bucket = extractBucket(this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    this._deleted = true;\n    this._requests.forEach(request => request.cancel());\n    this._requests.clear();\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<T>(\n    requestInfo: RequestInfo<T>,\n    authToken: string | null\n  ): Request<T> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        this._pool,\n        this._firebaseVersion\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _getProvider,\n  FirebaseApp,\n  getApp\n  // eslint-disable-next-line import/no-extraneous-dependencies\n} from '@firebase/app-exp';\n\nimport {\n  ref as refInternal,\n  StorageService as StorageServiceInternal\n} from '../src/service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  StorageService,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from '../src/metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal\n} from '../src/reference';\nimport { STORAGE_TYPE } from './constants';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from '../src/implementation/location';\nexport { UploadTask as _UploadTask } from '../src/task';\nexport type { Reference as _Reference } from '../src/reference';\nexport { FbsBlob as _FbsBlob } from '../src/implementation/blob';\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: string,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A promise that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A promise that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A promise that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A promise that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a StorageReference for the given url.\n * @param storage - `StorageService` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: StorageService, url?: string): StorageReference;\n/**\n * Returns a StorageReference for the given path in the\n * default bucket.\n * @param storageOrRef - `StorageService` or `StorageReference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: StorageService | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: StorageService | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as StorageServiceInternal | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\nexport { StringFormat } from '../src/implementation/string';\n\n/**\n * Gets a Firebase StorageService instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get Storage instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A Firebase StorageService instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): StorageService {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage-exp'> = _getProvider(\n    app,\n    STORAGE_TYPE\n  );\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTaskSnapshot } from '../exp/api';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskSnapshotCompat\n  implements types.UploadTaskSnapshot, Compat<UploadTaskSnapshot> {\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): types.FullMetadata {\n    return this._delegate.metadata as types.FullMetadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UploadTask,\n  FirebaseStorageError,\n  UploadTaskSnapshot,\n  TaskEvent,\n  StorageObserver\n} from '../exp/api';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskCompat implements types.UploadTask, Compat<UploadTask> {\n  constructor(\n    readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {}\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: FirebaseStorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: (error: FirebaseStorageError) => void | null,\n    completed?: () => void | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: FirebaseStorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ListResult } from '../exp/api';\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport { Compat } from '@firebase/util';\n\nexport class ListResultCompat implements types.ListResult, Compat<ListResult> {\n  constructor(\n    readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  StorageReference,\n  uploadBytesResumable,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject,\n  UploadTask,\n  StringFormat,\n  _UploadTask,\n  _getChild,\n  _Reference,\n  _FbsBlob\n} from '../exp/api'; // import from the exp public API\n\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\n\nimport * as types from '@firebase/storage-types';\nimport { Metadata } from '../src/metadata';\nimport { dataFromString } from '../src/implementation/string';\nimport { invalidRootOperation } from '../src/implementation/error';\nimport { Compat } from '@firebase/util';\n\nexport class ReferenceCompat\n  implements types.Reference, Compat<StorageReference> {\n  constructor(\n    readonly _delegate: StorageReference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: types.FullMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata as Metadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: Metadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    const data = dataFromString(format, value);\n    const metadataClone = { ...metadata } as Metadata;\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(\n      new _UploadTask(\n        this._delegate as _Reference,\n        new _FbsBlob(data.data, true),\n        metadataClone\n      ) as UploadTask,\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: types.ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options || undefined).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A promise that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<types.FullMetadata> {\n    return getMetadata(this._delegate) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A promise that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(\n    metadata: types.SettableMetadata\n  ): Promise<types.FullMetadata> {\n    return updateMetadata(\n      this._delegate,\n      metadata as Metadata\n    ) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * @returns A promise that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A promise that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if ((this._delegate as _Reference)._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { FirebaseApp } from '@firebase/app-types';\n\nimport { StorageService, ref, _Location } from '../exp/api'; // import from the exp public API\nimport { ReferenceCompat } from './reference';\nimport { isUrl } from '../src/service';\nimport { invalidArgument } from '../src/implementation/error';\nimport { Compat } from '@firebase/util';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat\n  implements types.FirebaseStorage, Compat<StorageService> {\n  constructor(public app: FirebaseApp, readonly _delegate: StorageService) {}\n\n  INTERNAL = {\n    /**\n     * Called when the associated app is deleted.\n     */\n    delete: () => {\n      return this._delegate._delete();\n    }\n  };\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      _Location.makeFromUrl(url);\n    } catch (e) {\n      throw invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { StringFormat } from './src/implementation/string';\nimport { TaskEvent, TaskState } from './src/implementation/taskenums';\n\nimport { XhrIoPool } from './src/implementation/xhriopool';\nimport { ReferenceCompat } from './compat/reference';\nimport { StorageServiceCompat } from './compat/service';\nimport { StorageService } from './src/service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from './package.json';\n\nimport './register-module';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): types.FirebaseStorage {\n  // Dependencies\n  // TODO: This should eventually be 'app-compat'\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n\n  // TODO: get StorageService instance from component framework instead\n  // of creating a new one.\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    new StorageService(\n      app,\n      authProvider,\n      new XhrIoPool(),\n      url,\n      firebase.SDK_VERSION\n    )\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: StorageService,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as _FirebaseNamespace);\n"],"names":["DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","FirebaseStorageError","_super","code","message","_this","call","prependCode","customData","serverResponse","Object","setPrototypeOf","prototype","__extends","_codeEquals","this","defineProperty","FirebaseError","unknown","canceled","cannotSliceBlob","invalidArgument","appDeleted","invalidRootOperation","name","invalidFormat","format","internalError","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","StringData","data","contentType","dataFromString","stringData","utf8Bytes_","base64Bytes_","dataUrl","parts","DataURLParts","base64","rest","value","decoded","decodeURIComponent","e","percentEncodedBytes_","dataURLBytes_","b","i","length","c","charCodeAt","push","Uint8Array","hasMinus","indexOf","hasUnder","hasPlus","hasSlash","replace","bytes","atob","array","dataURL","matches","match","middle","s","end","substring","ErrorCode","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","CANCELED","ERROR","taskStateFromInternalTaskState","state","NetworkXhrIo","sent_","xhr_","XMLHttpRequest","errorCode_","NO_ERROR","sendPromise_","Promise","resolve","addEventListener","ABORT","NETWORK_ERROR","send","url","method","body","headers","open","undefined","key","hasOwnProperty","setRequestHeader","toString","getErrorCode","getStatus","status","getResponseText","responseText","abort","getResponseHeader","header","addUploadProgressListener","listener","upload","removeUploadProgressListener","removeEventListener","XhrIoPool","createXhrIo","Location","bucket","path","path_","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","makeFromBucketSpec","bucketString","bucketLocation","makeFromUrl","location","bucketDomain","gsRegex","RegExp","httpModify","loc","firebaseStorageHost","groups","regex","indices","postModify","charAt","slice","group","captures","exec","bucketValue","pathValue","invalidUrl","FailRequest","error","promise_","reject","getPromise","cancel","_appDelete","isString","p","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","makeUrl","urlPart","makeQueryString","params","queryPart","NetworkRequest","successCodes","additionalRetryCodes","callback","errorCallback","timeout","progressCallback","pool","pendingXhr_","backoffId_","canceled_","appDelete_","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","progressCallback_","timeout_","pool_","resolve_","reject_","start_","self","backoffDone","requestWentThrough","err","xhr","wasSuccessCode","result","RequestEndStatus","f","waitSeconds","timeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","_i","arguments","apply","callWithDelay","millis","setTimeout","handler","success","waitMillis","__spreadArray","Math","random","stopped","stop","wasTimeout","clearTimeout","start","backoffCallback","progressListener","then","hitServer","isRetryStatusCode_","successCode","wasCanceled","progressEvent","loaded","total","lengthComputable","appDelete","isFiveHundredCode","isExtraRetryCode","isRequestSpecificRetryCode","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob","bb","append","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","sliced","blob","webkitSlice","mozSlice","sliceBlob","buffer","blobby","map","val","uint8Arrays","finalLength_1","forEach","merged_1","index_1","uploadData","jsonObjectOrNull","obj","JSON","parse","Array","isArray","lastComponent","index","lastIndexOf","noXform_","metadata","Mapping","server","local","writable","xform","mappings_","getMappings","mappings","nameMapping","_metadata","fullPath","xformPath","sizeMapping","Number","fromResource","service","resource","len","mapping","get","_makeStorageReference","addRef","fromResourceString","resourceString","toResourceString","stringify","PREFIXES_KEY","ITEMS_KEY","fromResponseString","listResult","prefixes","items","nextPageToken","_a","pathWithoutTrailingSlash","reference","_b","_c","item","fromBackendResponse","RequestInfo","urlParams","errorHandler","handlerCheck","cndn","metadataHandler","text","downloadUrlHandler","tokens","split","token","alt","downloadUrlFromResourceString","sharedErrorHandler","newErr","objectErrorHandler","shared","getMetadata","maxOperationRetryTime","requestInfo","list","delimiter","pageToken","maxResults","isRoot","listHandler","metadataForUpload_","metadataClone","assign","determineContentType_","ResumableUploadStatus","current","finalized","checkResumeHeader_","allowed","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","status_","bytesLeft","bytesToUpload","min","maxUploadRetryTime","uploadStatus","newCurrent","Observer","nextOrObserver","complete","next","observer","async","argsToForward","UploadTask","ref","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","completeTransitions_","_transition","_metadataErrorHandler","_promise","_start","_makeProgressCallback","sizeBefore","_updateProgress","_createResumable","_fetchStatus","_fetchMetadata","_continueUpload","_oneShotUpload","_resolveToken","storage","_getAuthToken","authToken","metadataForUpload","createResumableUpload","_location","createRequest","_makeRequest","sizeString","isNaN","getResumableUploadStatus","statusRequest","uploadRequest","newStatus","_increaseMultiplier","metadataRequest","boundary","str","genBoundary","metadata_","preBlobPart","postBlobPart","multipartUpload","multipartRequest","transferred","old","_notifyObservers","wasPaused","externalState","bytesTransferred","totalBytes","task","on","completed","_addObserver","_removeObserver","onFulfilled","onRejected","catch","_notifyObserver","splice","_finishPromise","triggered","bind","snapshot","resume","valid","pause","Reference","_service","_newRef","newPath","parent","_throwIfRoot","listAll","accumulator","listAllHelper","list$1","nextPage","sent","options","op","updateMetadata$1","updateMetadata","getDownloadURL","getDownloadUrl","deleteObject$1","_xhr","_text","deleteObject","_getChild","childPath","canonicalChildPath","filter","component","join","child","isUrl","test","refFromPath","StorageService","_bucket","includes","serviceOrRef","pathOrUrl","app","_authProvider","_pool","_url","_firebaseVersion","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","config","extractBucket","time","POSITIVE_INFINITY","auth","getImmediate","optional","getToken","tokenData","accessToken","_delete","request","clear","request_1","appId","firebaseVersion","addGmpidHeader_","addAuthHeader_","addVersionHeader_","makeRequest","add","delete","uploadBytesResumable$1","uploadBytesResumable","getModularInstance","getMetadata$2","getMetadata$1","ref$1","UploadTaskSnapshotCompat","_delegate","UploadTaskCompat","wrappedNextOrObserver","taskSnapshot","ListResultCompat","ReferenceCompat","_getChild$1","root","put","putString","__assign","listAll$1","r","list$2","updateMetadata$2","getDownloadURL$1","deleteObject$2","StorageServiceCompat","INTERNAL","refFromURL","setMaxUploadRetryTime","setMaxOperationRetryTime","factory","container","instanceIdentifier","getProvider","authProvider","firebase","instance","namespaceExports","Storage","registerComponent","Component","setServiceProps","setMultipleInstances","registerVersion","registerStorage"],"sourceRoot":""}